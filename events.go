// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package perpetuals

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_CreatePositionRequestEvent:
		value := new(CreatePositionRequestEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CreatePositionRequestEvent: %w", err)
		}
		return value, nil
	case Event_InstantCreateTpslEvent:
		value := new(InstantCreateTpslEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InstantCreateTpslEvent: %w", err)
		}
		return value, nil
	case Event_InstantUpdateTpslEvent:
		value := new(InstantUpdateTpslEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InstantUpdateTpslEvent: %w", err)
		}
		return value, nil
	case Event_ClosePositionRequestEvent:
		value := new(ClosePositionRequestEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClosePositionRequestEvent: %w", err)
		}
		return value, nil
	case Event_IncreasePositionEvent:
		value := new(IncreasePositionEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as IncreasePositionEvent: %w", err)
		}
		return value, nil
	case Event_IncreasePositionPreSwapEvent:
		value := new(IncreasePositionPreSwapEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as IncreasePositionPreSwapEvent: %w", err)
		}
		return value, nil
	case Event_DecreasePositionEvent:
		value := new(DecreasePositionEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DecreasePositionEvent: %w", err)
		}
		return value, nil
	case Event_DecreasePositionPostSwapEvent:
		value := new(DecreasePositionPostSwapEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as DecreasePositionPostSwapEvent: %w", err)
		}
		return value, nil
	case Event_LiquidateFullPositionEvent:
		value := new(LiquidateFullPositionEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as LiquidateFullPositionEvent: %w", err)
		}
		return value, nil
	case Event_PoolSwapEvent:
		value := new(PoolSwapEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PoolSwapEvent: %w", err)
		}
		return value, nil
	case Event_PoolSwapExactOutEvent:
		value := new(PoolSwapExactOutEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PoolSwapExactOutEvent: %w", err)
		}
		return value, nil
	case Event_AddLiquidityEvent:
		value := new(AddLiquidityEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AddLiquidityEvent: %w", err)
		}
		return value, nil
	case Event_RemoveLiquidityEvent:
		value := new(RemoveLiquidityEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as RemoveLiquidityEvent: %w", err)
		}
		return value, nil
	case Event_InstantCreateLimitOrderEvent:
		value := new(InstantCreateLimitOrderEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InstantCreateLimitOrderEvent: %w", err)
		}
		return value, nil
	case Event_InstantIncreasePositionEvent:
		value := new(InstantIncreasePositionEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InstantIncreasePositionEvent: %w", err)
		}
		return value, nil
	case Event_InstantDecreasePositionEvent:
		value := new(InstantDecreasePositionEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as InstantDecreasePositionEvent: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_CreatePositionRequestEvent(eventData []byte) (*CreatePositionRequestEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CreatePositionRequestEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CreatePositionRequestEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(CreatePositionRequestEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CreatePositionRequestEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_InstantCreateTpslEvent(eventData []byte) (*InstantCreateTpslEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InstantCreateTpslEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InstantCreateTpslEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(InstantCreateTpslEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InstantCreateTpslEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_InstantUpdateTpslEvent(eventData []byte) (*InstantUpdateTpslEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InstantUpdateTpslEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InstantUpdateTpslEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(InstantUpdateTpslEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InstantUpdateTpslEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_ClosePositionRequestEvent(eventData []byte) (*ClosePositionRequestEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClosePositionRequestEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClosePositionRequestEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClosePositionRequestEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClosePositionRequestEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_IncreasePositionEvent(eventData []byte) (*IncreasePositionEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_IncreasePositionEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_IncreasePositionEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(IncreasePositionEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type IncreasePositionEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_IncreasePositionPreSwapEvent(eventData []byte) (*IncreasePositionPreSwapEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_IncreasePositionPreSwapEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_IncreasePositionPreSwapEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(IncreasePositionPreSwapEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type IncreasePositionPreSwapEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_DecreasePositionEvent(eventData []byte) (*DecreasePositionEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DecreasePositionEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DecreasePositionEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(DecreasePositionEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DecreasePositionEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_DecreasePositionPostSwapEvent(eventData []byte) (*DecreasePositionPostSwapEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_DecreasePositionPostSwapEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_DecreasePositionPostSwapEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(DecreasePositionPostSwapEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type DecreasePositionPostSwapEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_LiquidateFullPositionEvent(eventData []byte) (*LiquidateFullPositionEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_LiquidateFullPositionEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_LiquidateFullPositionEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(LiquidateFullPositionEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type LiquidateFullPositionEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_PoolSwapEvent(eventData []byte) (*PoolSwapEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PoolSwapEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PoolSwapEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(PoolSwapEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PoolSwapEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_PoolSwapExactOutEvent(eventData []byte) (*PoolSwapExactOutEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PoolSwapExactOutEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PoolSwapExactOutEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(PoolSwapExactOutEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PoolSwapExactOutEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_AddLiquidityEvent(eventData []byte) (*AddLiquidityEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AddLiquidityEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AddLiquidityEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(AddLiquidityEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AddLiquidityEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_RemoveLiquidityEvent(eventData []byte) (*RemoveLiquidityEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_RemoveLiquidityEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_RemoveLiquidityEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(RemoveLiquidityEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type RemoveLiquidityEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_InstantCreateLimitOrderEvent(eventData []byte) (*InstantCreateLimitOrderEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InstantCreateLimitOrderEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InstantCreateLimitOrderEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(InstantCreateLimitOrderEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InstantCreateLimitOrderEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_InstantIncreasePositionEvent(eventData []byte) (*InstantIncreasePositionEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InstantIncreasePositionEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InstantIncreasePositionEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(InstantIncreasePositionEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InstantIncreasePositionEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_InstantDecreasePositionEvent(eventData []byte) (*InstantDecreasePositionEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_InstantDecreasePositionEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_InstantDecreasePositionEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(InstantDecreasePositionEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type InstantDecreasePositionEvent: %w", err)
	}
	return event, nil
}
