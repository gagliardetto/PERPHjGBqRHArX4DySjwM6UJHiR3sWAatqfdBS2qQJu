// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package perpetuals

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type AddCustodyParams struct {
	IsStable                       bool               `json:"isStable"`
	Oracle                         OracleParams       `json:"oracle"`
	Pricing                        PricingParams      `json:"pricing"`
	Permissions                    Permissions        `json:"permissions"`
	HourlyFundingDbps              uint64             `json:"hourlyFundingDbps"`
	TargetRatioBps                 uint64             `json:"targetRatioBps"`
	IncreasePositionBps            uint64             `json:"increasePositionBps"`
	DecreasePositionBps            uint64             `json:"decreasePositionBps"`
	DovesOracle                    solanago.PublicKey `json:"dovesOracle"`
	MaxPositionSizeUsd             uint64             `json:"maxPositionSizeUsd"`
	JumpRate                       JumpRateState      `json:"jumpRate"`
	PriceImpactFeeFactor           uint64             `json:"priceImpactFeeFactor"`
	PriceImpactExponent            float32            `json:"priceImpactExponent"`
	DeltaImbalanceThresholdDecimal uint64             `json:"deltaImbalanceThresholdDecimal"`
	MaxFeeBps                      uint64             `json:"maxFeeBps"`
	DovesAgOracle                  solanago.PublicKey `json:"dovesAgOracle"`
}

func (obj AddCustodyParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `IsStable`:
	err = encoder.Encode(obj.IsStable)
	if err != nil {
		return errors.NewField("IsStable", err)
	}
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `Pricing`:
	err = encoder.Encode(obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Serialize `Permissions`:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Serialize `HourlyFundingDbps`:
	err = encoder.Encode(obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	// Serialize `TargetRatioBps`:
	err = encoder.Encode(obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Serialize `IncreasePositionBps`:
	err = encoder.Encode(obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Serialize `DecreasePositionBps`:
	err = encoder.Encode(obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Serialize `DovesOracle`:
	err = encoder.Encode(obj.DovesOracle)
	if err != nil {
		return errors.NewField("DovesOracle", err)
	}
	// Serialize `MaxPositionSizeUsd`:
	err = encoder.Encode(obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Serialize `JumpRate`:
	err = encoder.Encode(obj.JumpRate)
	if err != nil {
		return errors.NewField("JumpRate", err)
	}
	// Serialize `PriceImpactFeeFactor`:
	err = encoder.Encode(obj.PriceImpactFeeFactor)
	if err != nil {
		return errors.NewField("PriceImpactFeeFactor", err)
	}
	// Serialize `PriceImpactExponent`:
	err = encoder.Encode(obj.PriceImpactExponent)
	if err != nil {
		return errors.NewField("PriceImpactExponent", err)
	}
	// Serialize `DeltaImbalanceThresholdDecimal`:
	err = encoder.Encode(obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Serialize `MaxFeeBps`:
	err = encoder.Encode(obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	// Serialize `DovesAgOracle`:
	err = encoder.Encode(obj.DovesAgOracle)
	if err != nil {
		return errors.NewField("DovesAgOracle", err)
	}
	return nil
}

func (obj AddCustodyParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddCustodyParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddCustodyParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `IsStable`:
	err = decoder.Decode(&obj.IsStable)
	if err != nil {
		return errors.NewField("IsStable", err)
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `Pricing`:
	err = decoder.Decode(&obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Deserialize `HourlyFundingDbps`:
	err = decoder.Decode(&obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	// Deserialize `TargetRatioBps`:
	err = decoder.Decode(&obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Deserialize `IncreasePositionBps`:
	err = decoder.Decode(&obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Deserialize `DecreasePositionBps`:
	err = decoder.Decode(&obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Deserialize `DovesOracle`:
	err = decoder.Decode(&obj.DovesOracle)
	if err != nil {
		return errors.NewField("DovesOracle", err)
	}
	// Deserialize `MaxPositionSizeUsd`:
	err = decoder.Decode(&obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Deserialize `JumpRate`:
	err = decoder.Decode(&obj.JumpRate)
	if err != nil {
		return errors.NewField("JumpRate", err)
	}
	// Deserialize `PriceImpactFeeFactor`:
	err = decoder.Decode(&obj.PriceImpactFeeFactor)
	if err != nil {
		return errors.NewField("PriceImpactFeeFactor", err)
	}
	// Deserialize `PriceImpactExponent`:
	err = decoder.Decode(&obj.PriceImpactExponent)
	if err != nil {
		return errors.NewField("PriceImpactExponent", err)
	}
	// Deserialize `DeltaImbalanceThresholdDecimal`:
	err = decoder.Decode(&obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Deserialize `MaxFeeBps`:
	err = decoder.Decode(&obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	// Deserialize `DovesAgOracle`:
	err = decoder.Decode(&obj.DovesAgOracle)
	if err != nil {
		return errors.NewField("DovesAgOracle", err)
	}
	return nil
}

func (obj *AddCustodyParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddCustodyParams: %w", err)
	}
	return nil
}

func UnmarshalAddCustodyParams(buf []byte) (*AddCustodyParams, error) {
	obj := new(AddCustodyParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddLiquidity2Params struct {
	TokenAmountIn      uint64  `json:"tokenAmountIn"`
	MinLpAmountOut     uint64  `json:"minLpAmountOut"`
	TokenAmountPreSwap *uint64 `bin:"optional" json:"tokenAmountPreSwap,omitempty"`
}

func (obj AddLiquidity2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenAmountIn`:
	err = encoder.Encode(obj.TokenAmountIn)
	if err != nil {
		return errors.NewField("TokenAmountIn", err)
	}
	// Serialize `MinLpAmountOut`:
	err = encoder.Encode(obj.MinLpAmountOut)
	if err != nil {
		return errors.NewField("MinLpAmountOut", err)
	}
	// Serialize `TokenAmountPreSwap` (optional):
	{
		if obj.TokenAmountPreSwap == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TokenAmountPreSwap", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TokenAmountPreSwap", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TokenAmountPreSwap)
			if err != nil {
				return errors.NewField("TokenAmountPreSwap", err)
			}
		}
	}
	return nil
}

func (obj AddLiquidity2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidity2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidity2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenAmountIn`:
	err = decoder.Decode(&obj.TokenAmountIn)
	if err != nil {
		return errors.NewField("TokenAmountIn", err)
	}
	// Deserialize `MinLpAmountOut`:
	err = decoder.Decode(&obj.MinLpAmountOut)
	if err != nil {
		return errors.NewField("MinLpAmountOut", err)
	}
	// Deserialize `TokenAmountPreSwap` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TokenAmountPreSwap", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TokenAmountPreSwap)
			if err != nil {
				return errors.NewField("TokenAmountPreSwap", err)
			}
		}
	}
	return nil
}

func (obj *AddLiquidity2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidity2Params: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidity2Params(buf []byte) (*AddLiquidity2Params, error) {
	obj := new(AddLiquidity2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddPoolParams struct {
	Name                   string `json:"name"`
	Limit                  Limit  `json:"limit"`
	Fees                   Fees   `json:"fees"`
	MaxRequestExecutionSec int64  `json:"maxRequestExecutionSec"`
}

func (obj AddPoolParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Limit`:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `MaxRequestExecutionSec`:
	err = encoder.Encode(obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	return nil
}

func (obj AddPoolParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddPoolParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddPoolParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `MaxRequestExecutionSec`:
	err = decoder.Decode(&obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	return nil
}

func (obj *AddPoolParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddPoolParams: %w", err)
	}
	return nil
}

func UnmarshalAddPoolParams(buf []byte) (*AddPoolParams, error) {
	obj := new(AddPoolParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClosePositionRequestParams struct{}

func (obj ClosePositionRequestParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj ClosePositionRequestParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClosePositionRequestParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClosePositionRequestParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *ClosePositionRequestParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClosePositionRequestParams: %w", err)
	}
	return nil
}

func UnmarshalClosePositionRequestParams(buf []byte) (*ClosePositionRequestParams, error) {
	obj := new(ClosePositionRequestParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateDecreasePositionMarketRequestParams struct {
	CollateralUsdDelta uint64  `json:"collateralUsdDelta"`
	SizeUsdDelta       uint64  `json:"sizeUsdDelta"`
	PriceSlippage      uint64  `json:"priceSlippage"`
	JupiterMinimumOut  *uint64 `bin:"optional" json:"jupiterMinimumOut,omitempty"`
	EntirePosition     *bool   `bin:"optional" json:"entirePosition,omitempty"`
	Counter            uint64  `json:"counter"`
}

func (obj CreateDecreasePositionMarketRequestParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CollateralUsdDelta`:
	err = encoder.Encode(obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `PriceSlippage`:
	err = encoder.Encode(obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Serialize `JupiterMinimumOut` (optional):
	{
		if obj.JupiterMinimumOut == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Serialize `EntirePosition` (optional):
	{
		if obj.EntirePosition == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Serialize `Counter`:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	return nil
}

func (obj CreateDecreasePositionMarketRequestParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateDecreasePositionMarketRequestParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateDecreasePositionMarketRequestParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CollateralUsdDelta`:
	err = decoder.Decode(&obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `PriceSlippage`:
	err = decoder.Decode(&obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Deserialize `JupiterMinimumOut` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Deserialize `EntirePosition` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("EntirePosition", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	return nil
}

func (obj *CreateDecreasePositionMarketRequestParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateDecreasePositionMarketRequestParams: %w", err)
	}
	return nil
}

func UnmarshalCreateDecreasePositionMarketRequestParams(buf []byte) (*CreateDecreasePositionMarketRequestParams, error) {
	obj := new(CreateDecreasePositionMarketRequestParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateDecreasePositionRequest2Params struct {
	CollateralUsdDelta    uint64      `json:"collateralUsdDelta"`
	SizeUsdDelta          uint64      `json:"sizeUsdDelta"`
	RequestType           RequestType `json:"requestType"`
	PriceSlippage         *uint64     `bin:"optional" json:"priceSlippage,omitempty"`
	JupiterMinimumOut     *uint64     `bin:"optional" json:"jupiterMinimumOut,omitempty"`
	TriggerPrice          *uint64     `bin:"optional" json:"triggerPrice,omitempty"`
	TriggerAboveThreshold *bool       `bin:"optional" json:"triggerAboveThreshold,omitempty"`
	EntirePosition        *bool       `bin:"optional" json:"entirePosition,omitempty"`
	Counter               uint64      `json:"counter"`
}

func (obj CreateDecreasePositionRequest2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CollateralUsdDelta`:
	err = encoder.Encode(obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `RequestType`:
	err = encoder.Encode(obj.RequestType)
	if err != nil {
		return errors.NewField("RequestType", err)
	}
	// Serialize `PriceSlippage` (optional):
	{
		if obj.PriceSlippage == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Serialize `JupiterMinimumOut` (optional):
	{
		if obj.JupiterMinimumOut == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Serialize `TriggerPrice` (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Serialize `TriggerAboveThreshold` (optional):
	{
		if obj.TriggerAboveThreshold == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerAboveThreshold", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerAboveThreshold", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerAboveThreshold)
			if err != nil {
				return errors.NewField("TriggerAboveThreshold", err)
			}
		}
	}
	// Serialize `EntirePosition` (optional):
	{
		if obj.EntirePosition == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Serialize `Counter`:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	return nil
}

func (obj CreateDecreasePositionRequest2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateDecreasePositionRequest2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateDecreasePositionRequest2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CollateralUsdDelta`:
	err = decoder.Decode(&obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `RequestType`:
	err = decoder.Decode(&obj.RequestType)
	if err != nil {
		return errors.NewField("RequestType", err)
	}
	// Deserialize `PriceSlippage` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PriceSlippage", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Deserialize `JupiterMinimumOut` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Deserialize `TriggerAboveThreshold` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerAboveThreshold", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerAboveThreshold)
			if err != nil {
				return errors.NewField("TriggerAboveThreshold", err)
			}
		}
	}
	// Deserialize `EntirePosition` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("EntirePosition", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	return nil
}

func (obj *CreateDecreasePositionRequest2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateDecreasePositionRequest2Params: %w", err)
	}
	return nil
}

func UnmarshalCreateDecreasePositionRequest2Params(buf []byte) (*CreateDecreasePositionRequest2Params, error) {
	obj := new(CreateDecreasePositionRequest2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateIncreasePositionMarketRequestParams struct {
	SizeUsdDelta         uint64  `json:"sizeUsdDelta"`
	CollateralTokenDelta uint64  `json:"collateralTokenDelta"`
	Side                 Side    `json:"side"`
	PriceSlippage        uint64  `json:"priceSlippage"`
	JupiterMinimumOut    *uint64 `bin:"optional" json:"jupiterMinimumOut,omitempty"`
	Counter              uint64  `json:"counter"`
}

func (obj CreateIncreasePositionMarketRequestParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralTokenDelta`:
	err = encoder.Encode(obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Serialize `PriceSlippage`:
	err = encoder.Encode(obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Serialize `JupiterMinimumOut` (optional):
	{
		if obj.JupiterMinimumOut == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Serialize `Counter`:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	return nil
}

func (obj CreateIncreasePositionMarketRequestParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateIncreasePositionMarketRequestParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateIncreasePositionMarketRequestParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralTokenDelta`:
	err = decoder.Decode(&obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Deserialize `PriceSlippage`:
	err = decoder.Decode(&obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Deserialize `JupiterMinimumOut` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	return nil
}

func (obj *CreateIncreasePositionMarketRequestParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateIncreasePositionMarketRequestParams: %w", err)
	}
	return nil
}

func UnmarshalCreateIncreasePositionMarketRequestParams(buf []byte) (*CreateIncreasePositionMarketRequestParams, error) {
	obj := new(CreateIncreasePositionMarketRequestParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreateTokenMetadataParams struct {
	Name   string `json:"name"`
	Symbol string `json:"symbol"`
	Uri    string `json:"uri"`
}

func (obj CreateTokenMetadataParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Symbol`:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return errors.NewField("Symbol", err)
	}
	// Serialize `Uri`:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return errors.NewField("Uri", err)
	}
	return nil
}

func (obj CreateTokenMetadataParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateTokenMetadataParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateTokenMetadataParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return errors.NewField("Symbol", err)
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return errors.NewField("Uri", err)
	}
	return nil
}

func (obj *CreateTokenMetadataParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateTokenMetadataParams: %w", err)
	}
	return nil
}

func UnmarshalCreateTokenMetadataParams(buf []byte) (*CreateTokenMetadataParams, error) {
	obj := new(CreateTokenMetadataParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DecreasePosition4Params struct{}

func (obj DecreasePosition4Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj DecreasePosition4Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DecreasePosition4Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DecreasePosition4Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DecreasePosition4Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DecreasePosition4Params: %w", err)
	}
	return nil
}

func UnmarshalDecreasePosition4Params(buf []byte) (*DecreasePosition4Params, error) {
	obj := new(DecreasePosition4Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DecreasePositionWithInternalSwapParams struct{}

func (obj DecreasePositionWithInternalSwapParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj DecreasePositionWithInternalSwapParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DecreasePositionWithInternalSwapParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DecreasePositionWithInternalSwapParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *DecreasePositionWithInternalSwapParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DecreasePositionWithInternalSwapParams: %w", err)
	}
	return nil
}

func UnmarshalDecreasePositionWithInternalSwapParams(buf []byte) (*DecreasePositionWithInternalSwapParams, error) {
	obj := new(DecreasePositionWithInternalSwapParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type GetAddLiquidityAmountAndFee2Params struct {
	TokenAmountIn uint64 `json:"tokenAmountIn"`
}

func (obj GetAddLiquidityAmountAndFee2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenAmountIn`:
	err = encoder.Encode(obj.TokenAmountIn)
	if err != nil {
		return errors.NewField("TokenAmountIn", err)
	}
	return nil
}

func (obj GetAddLiquidityAmountAndFee2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GetAddLiquidityAmountAndFee2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GetAddLiquidityAmountAndFee2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenAmountIn`:
	err = decoder.Decode(&obj.TokenAmountIn)
	if err != nil {
		return errors.NewField("TokenAmountIn", err)
	}
	return nil
}

func (obj *GetAddLiquidityAmountAndFee2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GetAddLiquidityAmountAndFee2Params: %w", err)
	}
	return nil
}

func UnmarshalGetAddLiquidityAmountAndFee2Params(buf []byte) (*GetAddLiquidityAmountAndFee2Params, error) {
	obj := new(GetAddLiquidityAmountAndFee2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type GetAssetsUnderManagement2Params struct {
	Mode *PriceCalcMode `bin:"optional" json:"mode,omitempty"`
}

func (obj GetAssetsUnderManagement2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Mode` (optional):
	{
		if obj.Mode == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Mode", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Mode", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Mode)
			if err != nil {
				return errors.NewField("Mode", err)
			}
		}
	}
	return nil
}

func (obj GetAssetsUnderManagement2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GetAssetsUnderManagement2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GetAssetsUnderManagement2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Mode` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Mode", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Mode)
			if err != nil {
				return errors.NewField("Mode", err)
			}
		}
	}
	return nil
}

func (obj *GetAssetsUnderManagement2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GetAssetsUnderManagement2Params: %w", err)
	}
	return nil
}

func UnmarshalGetAssetsUnderManagement2Params(buf []byte) (*GetAssetsUnderManagement2Params, error) {
	obj := new(GetAssetsUnderManagement2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type GetRemoveLiquidityAmountAndFee2Params struct {
	LpAmountIn uint64 `json:"lpAmountIn"`
}

func (obj GetRemoveLiquidityAmountAndFee2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpAmountIn`:
	err = encoder.Encode(obj.LpAmountIn)
	if err != nil {
		return errors.NewField("LpAmountIn", err)
	}
	return nil
}

func (obj GetRemoveLiquidityAmountAndFee2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GetRemoveLiquidityAmountAndFee2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GetRemoveLiquidityAmountAndFee2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpAmountIn`:
	err = decoder.Decode(&obj.LpAmountIn)
	if err != nil {
		return errors.NewField("LpAmountIn", err)
	}
	return nil
}

func (obj *GetRemoveLiquidityAmountAndFee2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GetRemoveLiquidityAmountAndFee2Params: %w", err)
	}
	return nil
}

func UnmarshalGetRemoveLiquidityAmountAndFee2Params(buf []byte) (*GetRemoveLiquidityAmountAndFee2Params, error) {
	obj := new(GetRemoveLiquidityAmountAndFee2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreasePosition4Params struct{}

func (obj IncreasePosition4Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj IncreasePosition4Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreasePosition4Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreasePosition4Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *IncreasePosition4Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreasePosition4Params: %w", err)
	}
	return nil
}

func UnmarshalIncreasePosition4Params(buf []byte) (*IncreasePosition4Params, error) {
	obj := new(IncreasePosition4Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreasePositionPreSwapParams struct{}

func (obj IncreasePositionPreSwapParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj IncreasePositionPreSwapParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreasePositionPreSwapParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreasePositionPreSwapParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *IncreasePositionPreSwapParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreasePositionPreSwapParams: %w", err)
	}
	return nil
}

func UnmarshalIncreasePositionPreSwapParams(buf []byte) (*IncreasePositionPreSwapParams, error) {
	obj := new(IncreasePositionPreSwapParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreasePositionWithInternalSwapParams struct{}

func (obj IncreasePositionWithInternalSwapParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj IncreasePositionWithInternalSwapParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreasePositionWithInternalSwapParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreasePositionWithInternalSwapParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *IncreasePositionWithInternalSwapParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreasePositionWithInternalSwapParams: %w", err)
	}
	return nil
}

func UnmarshalIncreasePositionWithInternalSwapParams(buf []byte) (*IncreasePositionWithInternalSwapParams, error) {
	obj := new(IncreasePositionWithInternalSwapParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InitParams struct {
	AllowSwap                 bool `json:"allowSwap"`
	AllowAddLiquidity         bool `json:"allowAddLiquidity"`
	AllowRemoveLiquidity      bool `json:"allowRemoveLiquidity"`
	AllowIncreasePosition     bool `json:"allowIncreasePosition"`
	AllowDecreasePosition     bool `json:"allowDecreasePosition"`
	AllowCollateralWithdrawal bool `json:"allowCollateralWithdrawal"`
	AllowLiquidatePosition    bool `json:"allowLiquidatePosition"`
}

func (obj InitParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AllowSwap`:
	err = encoder.Encode(obj.AllowSwap)
	if err != nil {
		return errors.NewField("AllowSwap", err)
	}
	// Serialize `AllowAddLiquidity`:
	err = encoder.Encode(obj.AllowAddLiquidity)
	if err != nil {
		return errors.NewField("AllowAddLiquidity", err)
	}
	// Serialize `AllowRemoveLiquidity`:
	err = encoder.Encode(obj.AllowRemoveLiquidity)
	if err != nil {
		return errors.NewField("AllowRemoveLiquidity", err)
	}
	// Serialize `AllowIncreasePosition`:
	err = encoder.Encode(obj.AllowIncreasePosition)
	if err != nil {
		return errors.NewField("AllowIncreasePosition", err)
	}
	// Serialize `AllowDecreasePosition`:
	err = encoder.Encode(obj.AllowDecreasePosition)
	if err != nil {
		return errors.NewField("AllowDecreasePosition", err)
	}
	// Serialize `AllowCollateralWithdrawal`:
	err = encoder.Encode(obj.AllowCollateralWithdrawal)
	if err != nil {
		return errors.NewField("AllowCollateralWithdrawal", err)
	}
	// Serialize `AllowLiquidatePosition`:
	err = encoder.Encode(obj.AllowLiquidatePosition)
	if err != nil {
		return errors.NewField("AllowLiquidatePosition", err)
	}
	return nil
}

func (obj InitParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InitParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InitParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AllowSwap`:
	err = decoder.Decode(&obj.AllowSwap)
	if err != nil {
		return errors.NewField("AllowSwap", err)
	}
	// Deserialize `AllowAddLiquidity`:
	err = decoder.Decode(&obj.AllowAddLiquidity)
	if err != nil {
		return errors.NewField("AllowAddLiquidity", err)
	}
	// Deserialize `AllowRemoveLiquidity`:
	err = decoder.Decode(&obj.AllowRemoveLiquidity)
	if err != nil {
		return errors.NewField("AllowRemoveLiquidity", err)
	}
	// Deserialize `AllowIncreasePosition`:
	err = decoder.Decode(&obj.AllowIncreasePosition)
	if err != nil {
		return errors.NewField("AllowIncreasePosition", err)
	}
	// Deserialize `AllowDecreasePosition`:
	err = decoder.Decode(&obj.AllowDecreasePosition)
	if err != nil {
		return errors.NewField("AllowDecreasePosition", err)
	}
	// Deserialize `AllowCollateralWithdrawal`:
	err = decoder.Decode(&obj.AllowCollateralWithdrawal)
	if err != nil {
		return errors.NewField("AllowCollateralWithdrawal", err)
	}
	// Deserialize `AllowLiquidatePosition`:
	err = decoder.Decode(&obj.AllowLiquidatePosition)
	if err != nil {
		return errors.NewField("AllowLiquidatePosition", err)
	}
	return nil
}

func (obj *InitParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InitParams: %w", err)
	}
	return nil
}

func UnmarshalInitParams(buf []byte) (*InitParams, error) {
	obj := new(InitParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantCreateLimitOrderParams struct {
	SizeUsdDelta          uint64 `json:"sizeUsdDelta"`
	CollateralTokenDelta  uint64 `json:"collateralTokenDelta"`
	Side                  Side   `json:"side"`
	TriggerPrice          uint64 `json:"triggerPrice"`
	TriggerAboveThreshold bool   `json:"triggerAboveThreshold"`
	Counter               uint64 `json:"counter"`
	RequestTime           int64  `json:"requestTime"`
}

func (obj InstantCreateLimitOrderParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralTokenDelta`:
	err = encoder.Encode(obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Serialize `TriggerAboveThreshold`:
	err = encoder.Encode(obj.TriggerAboveThreshold)
	if err != nil {
		return errors.NewField("TriggerAboveThreshold", err)
	}
	// Serialize `Counter`:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	// Serialize `RequestTime`:
	err = encoder.Encode(obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj InstantCreateLimitOrderParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantCreateLimitOrderParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantCreateLimitOrderParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralTokenDelta`:
	err = decoder.Decode(&obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Deserialize `TriggerAboveThreshold`:
	err = decoder.Decode(&obj.TriggerAboveThreshold)
	if err != nil {
		return errors.NewField("TriggerAboveThreshold", err)
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	// Deserialize `RequestTime`:
	err = decoder.Decode(&obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj *InstantCreateLimitOrderParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantCreateLimitOrderParams: %w", err)
	}
	return nil
}

func UnmarshalInstantCreateLimitOrderParams(buf []byte) (*InstantCreateLimitOrderParams, error) {
	obj := new(InstantCreateLimitOrderParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantCreateTpslParams struct {
	CollateralUsdDelta    uint64 `json:"collateralUsdDelta"`
	SizeUsdDelta          uint64 `json:"sizeUsdDelta"`
	TriggerPrice          uint64 `json:"triggerPrice"`
	TriggerAboveThreshold bool   `json:"triggerAboveThreshold"`
	EntirePosition        bool   `json:"entirePosition"`
	Counter               uint64 `json:"counter"`
	RequestTime           int64  `json:"requestTime"`
}

func (obj InstantCreateTpslParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CollateralUsdDelta`:
	err = encoder.Encode(obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Serialize `TriggerAboveThreshold`:
	err = encoder.Encode(obj.TriggerAboveThreshold)
	if err != nil {
		return errors.NewField("TriggerAboveThreshold", err)
	}
	// Serialize `EntirePosition`:
	err = encoder.Encode(obj.EntirePosition)
	if err != nil {
		return errors.NewField("EntirePosition", err)
	}
	// Serialize `Counter`:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	// Serialize `RequestTime`:
	err = encoder.Encode(obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj InstantCreateTpslParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantCreateTpslParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantCreateTpslParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CollateralUsdDelta`:
	err = decoder.Decode(&obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Deserialize `TriggerAboveThreshold`:
	err = decoder.Decode(&obj.TriggerAboveThreshold)
	if err != nil {
		return errors.NewField("TriggerAboveThreshold", err)
	}
	// Deserialize `EntirePosition`:
	err = decoder.Decode(&obj.EntirePosition)
	if err != nil {
		return errors.NewField("EntirePosition", err)
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	// Deserialize `RequestTime`:
	err = decoder.Decode(&obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj *InstantCreateTpslParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantCreateTpslParams: %w", err)
	}
	return nil
}

func UnmarshalInstantCreateTpslParams(buf []byte) (*InstantCreateTpslParams, error) {
	obj := new(InstantCreateTpslParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantDecreasePositionParams struct {
	CollateralUsdDelta uint64 `json:"collateralUsdDelta"`
	SizeUsdDelta       uint64 `json:"sizeUsdDelta"`
	PriceSlippage      uint64 `json:"priceSlippage"`
	EntirePosition     *bool  `bin:"optional" json:"entirePosition,omitempty"`
	RequestTime        int64  `json:"requestTime"`
}

func (obj InstantDecreasePositionParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CollateralUsdDelta`:
	err = encoder.Encode(obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `PriceSlippage`:
	err = encoder.Encode(obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Serialize `EntirePosition` (optional):
	{
		if obj.EntirePosition == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Serialize `RequestTime`:
	err = encoder.Encode(obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj InstantDecreasePositionParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantDecreasePositionParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantDecreasePositionParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CollateralUsdDelta`:
	err = decoder.Decode(&obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `PriceSlippage`:
	err = decoder.Decode(&obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Deserialize `EntirePosition` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("EntirePosition", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Deserialize `RequestTime`:
	err = decoder.Decode(&obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj *InstantDecreasePositionParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantDecreasePositionParams: %w", err)
	}
	return nil
}

func UnmarshalInstantDecreasePositionParams(buf []byte) (*InstantDecreasePositionParams, error) {
	obj := new(InstantDecreasePositionParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantIncreasePositionParams struct {
	SizeUsdDelta         uint64  `json:"sizeUsdDelta"`
	CollateralTokenDelta *uint64 `bin:"optional" json:"collateralTokenDelta,omitempty"`
	Side                 Side    `json:"side"`
	PriceSlippage        uint64  `json:"priceSlippage"`
	RequestTime          int64   `json:"requestTime"`
}

func (obj InstantIncreasePositionParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralTokenDelta` (optional):
	{
		if obj.CollateralTokenDelta == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("CollateralTokenDelta", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("CollateralTokenDelta", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.CollateralTokenDelta)
			if err != nil {
				return errors.NewField("CollateralTokenDelta", err)
			}
		}
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Serialize `PriceSlippage`:
	err = encoder.Encode(obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Serialize `RequestTime`:
	err = encoder.Encode(obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj InstantIncreasePositionParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantIncreasePositionParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantIncreasePositionParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralTokenDelta` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("CollateralTokenDelta", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.CollateralTokenDelta)
			if err != nil {
				return errors.NewField("CollateralTokenDelta", err)
			}
		}
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Deserialize `PriceSlippage`:
	err = decoder.Decode(&obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Deserialize `RequestTime`:
	err = decoder.Decode(&obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj *InstantIncreasePositionParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantIncreasePositionParams: %w", err)
	}
	return nil
}

func UnmarshalInstantIncreasePositionParams(buf []byte) (*InstantIncreasePositionParams, error) {
	obj := new(InstantIncreasePositionParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantUpdateLimitOrderParams struct {
	SizeUsdDelta uint64 `json:"sizeUsdDelta"`
	TriggerPrice uint64 `json:"triggerPrice"`
	RequestTime  int64  `json:"requestTime"`
}

func (obj InstantUpdateLimitOrderParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Serialize `RequestTime`:
	err = encoder.Encode(obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj InstantUpdateLimitOrderParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantUpdateLimitOrderParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantUpdateLimitOrderParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Deserialize `RequestTime`:
	err = decoder.Decode(&obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj *InstantUpdateLimitOrderParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantUpdateLimitOrderParams: %w", err)
	}
	return nil
}

func UnmarshalInstantUpdateLimitOrderParams(buf []byte) (*InstantUpdateLimitOrderParams, error) {
	obj := new(InstantUpdateLimitOrderParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantUpdateTpslParams struct {
	SizeUsdDelta uint64 `json:"sizeUsdDelta"`
	TriggerPrice uint64 `json:"triggerPrice"`
	RequestTime  int64  `json:"requestTime"`
}

func (obj InstantUpdateTpslParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Serialize `RequestTime`:
	err = encoder.Encode(obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj InstantUpdateTpslParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantUpdateTpslParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantUpdateTpslParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	// Deserialize `RequestTime`:
	err = decoder.Decode(&obj.RequestTime)
	if err != nil {
		return errors.NewField("RequestTime", err)
	}
	return nil
}

func (obj *InstantUpdateTpslParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantUpdateTpslParams: %w", err)
	}
	return nil
}

func UnmarshalInstantUpdateTpslParams(buf []byte) (*InstantUpdateTpslParams, error) {
	obj := new(InstantUpdateTpslParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidateFullPosition4Params struct{}

func (obj LiquidateFullPosition4Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj LiquidateFullPosition4Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidateFullPosition4Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidateFullPosition4Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *LiquidateFullPosition4Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidateFullPosition4Params: %w", err)
	}
	return nil
}

func UnmarshalLiquidateFullPosition4Params(buf []byte) (*LiquidateFullPosition4Params, error) {
	obj := new(LiquidateFullPosition4Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OperatorSetCustodyConfigParams struct {
	Pricing                        PricingParams `json:"pricing"`
	HourlyFundingDbps              uint64        `json:"hourlyFundingDbps"`
	TargetRatioBps                 uint64        `json:"targetRatioBps"`
	IncreasePositionBps            uint64        `json:"increasePositionBps"`
	DecreasePositionBps            uint64        `json:"decreasePositionBps"`
	MaxPositionSizeUsd             uint64        `json:"maxPositionSizeUsd"`
	JumpRate                       JumpRateState `json:"jumpRate"`
	PriceImpactFeeFactor           uint64        `json:"priceImpactFeeFactor"`
	PriceImpactExponent            float32       `json:"priceImpactExponent"`
	DeltaImbalanceThresholdDecimal uint64        `json:"deltaImbalanceThresholdDecimal"`
	MaxFeeBps                      uint64        `json:"maxFeeBps"`
}

func (obj OperatorSetCustodyConfigParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pricing`:
	err = encoder.Encode(obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Serialize `HourlyFundingDbps`:
	err = encoder.Encode(obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	// Serialize `TargetRatioBps`:
	err = encoder.Encode(obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Serialize `IncreasePositionBps`:
	err = encoder.Encode(obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Serialize `DecreasePositionBps`:
	err = encoder.Encode(obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Serialize `MaxPositionSizeUsd`:
	err = encoder.Encode(obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Serialize `JumpRate`:
	err = encoder.Encode(obj.JumpRate)
	if err != nil {
		return errors.NewField("JumpRate", err)
	}
	// Serialize `PriceImpactFeeFactor`:
	err = encoder.Encode(obj.PriceImpactFeeFactor)
	if err != nil {
		return errors.NewField("PriceImpactFeeFactor", err)
	}
	// Serialize `PriceImpactExponent`:
	err = encoder.Encode(obj.PriceImpactExponent)
	if err != nil {
		return errors.NewField("PriceImpactExponent", err)
	}
	// Serialize `DeltaImbalanceThresholdDecimal`:
	err = encoder.Encode(obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Serialize `MaxFeeBps`:
	err = encoder.Encode(obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	return nil
}

func (obj OperatorSetCustodyConfigParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OperatorSetCustodyConfigParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OperatorSetCustodyConfigParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pricing`:
	err = decoder.Decode(&obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Deserialize `HourlyFundingDbps`:
	err = decoder.Decode(&obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	// Deserialize `TargetRatioBps`:
	err = decoder.Decode(&obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Deserialize `IncreasePositionBps`:
	err = decoder.Decode(&obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Deserialize `DecreasePositionBps`:
	err = decoder.Decode(&obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Deserialize `MaxPositionSizeUsd`:
	err = decoder.Decode(&obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Deserialize `JumpRate`:
	err = decoder.Decode(&obj.JumpRate)
	if err != nil {
		return errors.NewField("JumpRate", err)
	}
	// Deserialize `PriceImpactFeeFactor`:
	err = decoder.Decode(&obj.PriceImpactFeeFactor)
	if err != nil {
		return errors.NewField("PriceImpactFeeFactor", err)
	}
	// Deserialize `PriceImpactExponent`:
	err = decoder.Decode(&obj.PriceImpactExponent)
	if err != nil {
		return errors.NewField("PriceImpactExponent", err)
	}
	// Deserialize `DeltaImbalanceThresholdDecimal`:
	err = decoder.Decode(&obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Deserialize `MaxFeeBps`:
	err = decoder.Decode(&obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	return nil
}

func (obj *OperatorSetCustodyConfigParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OperatorSetCustodyConfigParams: %w", err)
	}
	return nil
}

func UnmarshalOperatorSetCustodyConfigParams(buf []byte) (*OperatorSetCustodyConfigParams, error) {
	obj := new(OperatorSetCustodyConfigParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OperatorSetPoolConfigParams struct {
	Fees                   Fees  `json:"fees"`
	Limit                  Limit `json:"limit"`
	MaxRequestExecutionSec int64 `json:"maxRequestExecutionSec"`
}

func (obj OperatorSetPoolConfigParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `Limit`:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Serialize `MaxRequestExecutionSec`:
	err = encoder.Encode(obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	return nil
}

func (obj OperatorSetPoolConfigParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OperatorSetPoolConfigParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OperatorSetPoolConfigParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Deserialize `MaxRequestExecutionSec`:
	err = decoder.Decode(&obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	return nil
}

func (obj *OperatorSetPoolConfigParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OperatorSetPoolConfigParams: %w", err)
	}
	return nil
}

func UnmarshalOperatorSetPoolConfigParams(buf []byte) (*OperatorSetPoolConfigParams, error) {
	obj := new(OperatorSetPoolConfigParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RefreshAssetsUnderManagementParams struct{}

func (obj RefreshAssetsUnderManagementParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj RefreshAssetsUnderManagementParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RefreshAssetsUnderManagementParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RefreshAssetsUnderManagementParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *RefreshAssetsUnderManagementParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RefreshAssetsUnderManagementParams: %w", err)
	}
	return nil
}

func UnmarshalRefreshAssetsUnderManagementParams(buf []byte) (*RefreshAssetsUnderManagementParams, error) {
	obj := new(RefreshAssetsUnderManagementParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidity2Params struct {
	LpAmountIn   uint64 `json:"lpAmountIn"`
	MinAmountOut uint64 `json:"minAmountOut"`
}

func (obj RemoveLiquidity2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LpAmountIn`:
	err = encoder.Encode(obj.LpAmountIn)
	if err != nil {
		return errors.NewField("LpAmountIn", err)
	}
	// Serialize `MinAmountOut`:
	err = encoder.Encode(obj.MinAmountOut)
	if err != nil {
		return errors.NewField("MinAmountOut", err)
	}
	return nil
}

func (obj RemoveLiquidity2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidity2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidity2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LpAmountIn`:
	err = decoder.Decode(&obj.LpAmountIn)
	if err != nil {
		return errors.NewField("LpAmountIn", err)
	}
	// Deserialize `MinAmountOut`:
	err = decoder.Decode(&obj.MinAmountOut)
	if err != nil {
		return errors.NewField("MinAmountOut", err)
	}
	return nil
}

func (obj *RemoveLiquidity2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidity2Params: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidity2Params(buf []byte) (*RemoveLiquidity2Params, error) {
	obj := new(RemoveLiquidity2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SetCustodyConfigParams struct {
	Oracle                         OracleParams       `json:"oracle"`
	Pricing                        PricingParams      `json:"pricing"`
	Permissions                    Permissions        `json:"permissions"`
	HourlyFundingDbps              uint64             `json:"hourlyFundingDbps"`
	TargetRatioBps                 uint64             `json:"targetRatioBps"`
	IncreasePositionBps            uint64             `json:"increasePositionBps"`
	DecreasePositionBps            uint64             `json:"decreasePositionBps"`
	DovesOracle                    solanago.PublicKey `json:"dovesOracle"`
	MaxPositionSizeUsd             uint64             `json:"maxPositionSizeUsd"`
	JumpRate                       JumpRateState      `json:"jumpRate"`
	PriceImpactFeeFactor           uint64             `json:"priceImpactFeeFactor"`
	PriceImpactExponent            float32            `json:"priceImpactExponent"`
	DeltaImbalanceThresholdDecimal uint64             `json:"deltaImbalanceThresholdDecimal"`
	MaxFeeBps                      uint64             `json:"maxFeeBps"`
	DovesAgOracle                  solanago.PublicKey `json:"dovesAgOracle"`
}

func (obj SetCustodyConfigParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `Pricing`:
	err = encoder.Encode(obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Serialize `Permissions`:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Serialize `HourlyFundingDbps`:
	err = encoder.Encode(obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	// Serialize `TargetRatioBps`:
	err = encoder.Encode(obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Serialize `IncreasePositionBps`:
	err = encoder.Encode(obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Serialize `DecreasePositionBps`:
	err = encoder.Encode(obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Serialize `DovesOracle`:
	err = encoder.Encode(obj.DovesOracle)
	if err != nil {
		return errors.NewField("DovesOracle", err)
	}
	// Serialize `MaxPositionSizeUsd`:
	err = encoder.Encode(obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Serialize `JumpRate`:
	err = encoder.Encode(obj.JumpRate)
	if err != nil {
		return errors.NewField("JumpRate", err)
	}
	// Serialize `PriceImpactFeeFactor`:
	err = encoder.Encode(obj.PriceImpactFeeFactor)
	if err != nil {
		return errors.NewField("PriceImpactFeeFactor", err)
	}
	// Serialize `PriceImpactExponent`:
	err = encoder.Encode(obj.PriceImpactExponent)
	if err != nil {
		return errors.NewField("PriceImpactExponent", err)
	}
	// Serialize `DeltaImbalanceThresholdDecimal`:
	err = encoder.Encode(obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Serialize `MaxFeeBps`:
	err = encoder.Encode(obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	// Serialize `DovesAgOracle`:
	err = encoder.Encode(obj.DovesAgOracle)
	if err != nil {
		return errors.NewField("DovesAgOracle", err)
	}
	return nil
}

func (obj SetCustodyConfigParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SetCustodyConfigParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SetCustodyConfigParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `Pricing`:
	err = decoder.Decode(&obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Deserialize `HourlyFundingDbps`:
	err = decoder.Decode(&obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	// Deserialize `TargetRatioBps`:
	err = decoder.Decode(&obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Deserialize `IncreasePositionBps`:
	err = decoder.Decode(&obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Deserialize `DecreasePositionBps`:
	err = decoder.Decode(&obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Deserialize `DovesOracle`:
	err = decoder.Decode(&obj.DovesOracle)
	if err != nil {
		return errors.NewField("DovesOracle", err)
	}
	// Deserialize `MaxPositionSizeUsd`:
	err = decoder.Decode(&obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Deserialize `JumpRate`:
	err = decoder.Decode(&obj.JumpRate)
	if err != nil {
		return errors.NewField("JumpRate", err)
	}
	// Deserialize `PriceImpactFeeFactor`:
	err = decoder.Decode(&obj.PriceImpactFeeFactor)
	if err != nil {
		return errors.NewField("PriceImpactFeeFactor", err)
	}
	// Deserialize `PriceImpactExponent`:
	err = decoder.Decode(&obj.PriceImpactExponent)
	if err != nil {
		return errors.NewField("PriceImpactExponent", err)
	}
	// Deserialize `DeltaImbalanceThresholdDecimal`:
	err = decoder.Decode(&obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Deserialize `MaxFeeBps`:
	err = decoder.Decode(&obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	// Deserialize `DovesAgOracle`:
	err = decoder.Decode(&obj.DovesAgOracle)
	if err != nil {
		return errors.NewField("DovesAgOracle", err)
	}
	return nil
}

func (obj *SetCustodyConfigParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SetCustodyConfigParams: %w", err)
	}
	return nil
}

func UnmarshalSetCustodyConfigParams(buf []byte) (*SetCustodyConfigParams, error) {
	obj := new(SetCustodyConfigParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SetPerpetualsConfigParams struct {
	Permissions Permissions `json:"permissions"`
}

func (obj SetPerpetualsConfigParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Permissions`:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	return nil
}

func (obj SetPerpetualsConfigParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SetPerpetualsConfigParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SetPerpetualsConfigParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	return nil
}

func (obj *SetPerpetualsConfigParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SetPerpetualsConfigParams: %w", err)
	}
	return nil
}

func UnmarshalSetPerpetualsConfigParams(buf []byte) (*SetPerpetualsConfigParams, error) {
	obj := new(SetPerpetualsConfigParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SetPoolConfigParams struct {
	Fees                   Fees  `json:"fees"`
	Limit                  Limit `json:"limit"`
	MaxRequestExecutionSec int64 `json:"maxRequestExecutionSec"`
}

func (obj SetPoolConfigParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `Limit`:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Serialize `MaxRequestExecutionSec`:
	err = encoder.Encode(obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	return nil
}

func (obj SetPoolConfigParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SetPoolConfigParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SetPoolConfigParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Deserialize `MaxRequestExecutionSec`:
	err = decoder.Decode(&obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	return nil
}

func (obj *SetPoolConfigParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SetPoolConfigParams: %w", err)
	}
	return nil
}

func UnmarshalSetPoolConfigParams(buf []byte) (*SetPoolConfigParams, error) {
	obj := new(SetPoolConfigParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SetTestTimeParams struct {
	Time int64 `json:"time"`
}

func (obj SetTestTimeParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Time`:
	err = encoder.Encode(obj.Time)
	if err != nil {
		return errors.NewField("Time", err)
	}
	return nil
}

func (obj SetTestTimeParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SetTestTimeParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SetTestTimeParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Time`:
	err = decoder.Decode(&obj.Time)
	if err != nil {
		return errors.NewField("Time", err)
	}
	return nil
}

func (obj *SetTestTimeParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SetTestTimeParams: %w", err)
	}
	return nil
}

func UnmarshalSetTestTimeParams(buf []byte) (*SetTestTimeParams, error) {
	obj := new(SetTestTimeParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Swap2Params struct {
	AmountIn     uint64 `json:"amountIn"`
	MinAmountOut uint64 `json:"minAmountOut"`
}

func (obj Swap2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `MinAmountOut`:
	err = encoder.Encode(obj.MinAmountOut)
	if err != nil {
		return errors.NewField("MinAmountOut", err)
	}
	return nil
}

func (obj Swap2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Swap2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Swap2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `MinAmountOut`:
	err = decoder.Decode(&obj.MinAmountOut)
	if err != nil {
		return errors.NewField("MinAmountOut", err)
	}
	return nil
}

func (obj *Swap2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Swap2Params: %w", err)
	}
	return nil
}

func UnmarshalSwap2Params(buf []byte) (*Swap2Params, error) {
	obj := new(Swap2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TestInitParams struct {
	AllowSwap                 bool `json:"allowSwap"`
	AllowAddLiquidity         bool `json:"allowAddLiquidity"`
	AllowRemoveLiquidity      bool `json:"allowRemoveLiquidity"`
	AllowIncreasePosition     bool `json:"allowIncreasePosition"`
	AllowDecreasePosition     bool `json:"allowDecreasePosition"`
	AllowCollateralWithdrawal bool `json:"allowCollateralWithdrawal"`
	AllowLiquidatePosition    bool `json:"allowLiquidatePosition"`
}

func (obj TestInitParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AllowSwap`:
	err = encoder.Encode(obj.AllowSwap)
	if err != nil {
		return errors.NewField("AllowSwap", err)
	}
	// Serialize `AllowAddLiquidity`:
	err = encoder.Encode(obj.AllowAddLiquidity)
	if err != nil {
		return errors.NewField("AllowAddLiquidity", err)
	}
	// Serialize `AllowRemoveLiquidity`:
	err = encoder.Encode(obj.AllowRemoveLiquidity)
	if err != nil {
		return errors.NewField("AllowRemoveLiquidity", err)
	}
	// Serialize `AllowIncreasePosition`:
	err = encoder.Encode(obj.AllowIncreasePosition)
	if err != nil {
		return errors.NewField("AllowIncreasePosition", err)
	}
	// Serialize `AllowDecreasePosition`:
	err = encoder.Encode(obj.AllowDecreasePosition)
	if err != nil {
		return errors.NewField("AllowDecreasePosition", err)
	}
	// Serialize `AllowCollateralWithdrawal`:
	err = encoder.Encode(obj.AllowCollateralWithdrawal)
	if err != nil {
		return errors.NewField("AllowCollateralWithdrawal", err)
	}
	// Serialize `AllowLiquidatePosition`:
	err = encoder.Encode(obj.AllowLiquidatePosition)
	if err != nil {
		return errors.NewField("AllowLiquidatePosition", err)
	}
	return nil
}

func (obj TestInitParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TestInitParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TestInitParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AllowSwap`:
	err = decoder.Decode(&obj.AllowSwap)
	if err != nil {
		return errors.NewField("AllowSwap", err)
	}
	// Deserialize `AllowAddLiquidity`:
	err = decoder.Decode(&obj.AllowAddLiquidity)
	if err != nil {
		return errors.NewField("AllowAddLiquidity", err)
	}
	// Deserialize `AllowRemoveLiquidity`:
	err = decoder.Decode(&obj.AllowRemoveLiquidity)
	if err != nil {
		return errors.NewField("AllowRemoveLiquidity", err)
	}
	// Deserialize `AllowIncreasePosition`:
	err = decoder.Decode(&obj.AllowIncreasePosition)
	if err != nil {
		return errors.NewField("AllowIncreasePosition", err)
	}
	// Deserialize `AllowDecreasePosition`:
	err = decoder.Decode(&obj.AllowDecreasePosition)
	if err != nil {
		return errors.NewField("AllowDecreasePosition", err)
	}
	// Deserialize `AllowCollateralWithdrawal`:
	err = decoder.Decode(&obj.AllowCollateralWithdrawal)
	if err != nil {
		return errors.NewField("AllowCollateralWithdrawal", err)
	}
	// Deserialize `AllowLiquidatePosition`:
	err = decoder.Decode(&obj.AllowLiquidatePosition)
	if err != nil {
		return errors.NewField("AllowLiquidatePosition", err)
	}
	return nil
}

func (obj *TestInitParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TestInitParams: %w", err)
	}
	return nil
}

func UnmarshalTestInitParams(buf []byte) (*TestInitParams, error) {
	obj := new(TestInitParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TransferAdminParams struct{}

func (obj TransferAdminParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj TransferAdminParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TransferAdminParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TransferAdminParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *TransferAdminParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TransferAdminParams: %w", err)
	}
	return nil
}

func UnmarshalTransferAdminParams(buf []byte) (*TransferAdminParams, error) {
	obj := new(TransferAdminParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type UpdateDecreasePositionRequest2Params struct {
	SizeUsdDelta uint64 `json:"sizeUsdDelta"`
	TriggerPrice uint64 `json:"triggerPrice"`
}

func (obj UpdateDecreasePositionRequest2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `TriggerPrice`:
	err = encoder.Encode(obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	return nil
}

func (obj UpdateDecreasePositionRequest2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UpdateDecreasePositionRequest2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UpdateDecreasePositionRequest2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `TriggerPrice`:
	err = decoder.Decode(&obj.TriggerPrice)
	if err != nil {
		return errors.NewField("TriggerPrice", err)
	}
	return nil
}

func (obj *UpdateDecreasePositionRequest2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UpdateDecreasePositionRequest2Params: %w", err)
	}
	return nil
}

func UnmarshalUpdateDecreasePositionRequest2Params(buf []byte) (*UpdateDecreasePositionRequest2Params, error) {
	obj := new(UpdateDecreasePositionRequest2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type WithdrawFees2Params struct{}

func (obj WithdrawFees2Params) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj WithdrawFees2Params) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WithdrawFees2Params: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WithdrawFees2Params) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *WithdrawFees2Params) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WithdrawFees2Params: %w", err)
	}
	return nil
}

func UnmarshalWithdrawFees2Params(buf []byte) (*WithdrawFees2Params, error) {
	obj := new(WithdrawFees2Params)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PriceImpactBuffer struct {
	OpenInterest                   [60]int64 `json:"openInterest"`
	LastUpdated                    int64     `json:"lastUpdated"`
	FeeFactor                      uint64    `json:"feeFactor"`
	Exponent                       float32   `json:"exponent"`
	DeltaImbalanceThresholdDecimal uint64    `json:"deltaImbalanceThresholdDecimal"`
	MaxFeeBps                      uint64    `json:"maxFeeBps"`
}

func (obj PriceImpactBuffer) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `OpenInterest`:
	err = encoder.Encode(obj.OpenInterest)
	if err != nil {
		return errors.NewField("OpenInterest", err)
	}
	// Serialize `LastUpdated`:
	err = encoder.Encode(obj.LastUpdated)
	if err != nil {
		return errors.NewField("LastUpdated", err)
	}
	// Serialize `FeeFactor`:
	err = encoder.Encode(obj.FeeFactor)
	if err != nil {
		return errors.NewField("FeeFactor", err)
	}
	// Serialize `Exponent`:
	err = encoder.Encode(obj.Exponent)
	if err != nil {
		return errors.NewField("Exponent", err)
	}
	// Serialize `DeltaImbalanceThresholdDecimal`:
	err = encoder.Encode(obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Serialize `MaxFeeBps`:
	err = encoder.Encode(obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	return nil
}

func (obj PriceImpactBuffer) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PriceImpactBuffer: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PriceImpactBuffer) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `OpenInterest`:
	err = decoder.Decode(&obj.OpenInterest)
	if err != nil {
		return errors.NewField("OpenInterest", err)
	}
	// Deserialize `LastUpdated`:
	err = decoder.Decode(&obj.LastUpdated)
	if err != nil {
		return errors.NewField("LastUpdated", err)
	}
	// Deserialize `FeeFactor`:
	err = decoder.Decode(&obj.FeeFactor)
	if err != nil {
		return errors.NewField("FeeFactor", err)
	}
	// Deserialize `Exponent`:
	err = decoder.Decode(&obj.Exponent)
	if err != nil {
		return errors.NewField("Exponent", err)
	}
	// Deserialize `DeltaImbalanceThresholdDecimal`:
	err = decoder.Decode(&obj.DeltaImbalanceThresholdDecimal)
	if err != nil {
		return errors.NewField("DeltaImbalanceThresholdDecimal", err)
	}
	// Deserialize `MaxFeeBps`:
	err = decoder.Decode(&obj.MaxFeeBps)
	if err != nil {
		return errors.NewField("MaxFeeBps", err)
	}
	return nil
}

func (obj *PriceImpactBuffer) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PriceImpactBuffer: %w", err)
	}
	return nil
}

func UnmarshalPriceImpactBuffer(buf []byte) (*PriceImpactBuffer, error) {
	obj := new(PriceImpactBuffer)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Assets struct {
	FeesReserves             uint64 `json:"feesReserves"`
	Owned                    uint64 `json:"owned"`
	Locked                   uint64 `json:"locked"`
	GuaranteedUsd            uint64 `json:"guaranteedUsd"`
	GlobalShortSizes         uint64 `json:"globalShortSizes"`
	GlobalShortAveragePrices uint64 `json:"globalShortAveragePrices"`
}

func (obj Assets) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `FeesReserves`:
	err = encoder.Encode(obj.FeesReserves)
	if err != nil {
		return errors.NewField("FeesReserves", err)
	}
	// Serialize `Owned`:
	err = encoder.Encode(obj.Owned)
	if err != nil {
		return errors.NewField("Owned", err)
	}
	// Serialize `Locked`:
	err = encoder.Encode(obj.Locked)
	if err != nil {
		return errors.NewField("Locked", err)
	}
	// Serialize `GuaranteedUsd`:
	err = encoder.Encode(obj.GuaranteedUsd)
	if err != nil {
		return errors.NewField("GuaranteedUsd", err)
	}
	// Serialize `GlobalShortSizes`:
	err = encoder.Encode(obj.GlobalShortSizes)
	if err != nil {
		return errors.NewField("GlobalShortSizes", err)
	}
	// Serialize `GlobalShortAveragePrices`:
	err = encoder.Encode(obj.GlobalShortAveragePrices)
	if err != nil {
		return errors.NewField("GlobalShortAveragePrices", err)
	}
	return nil
}

func (obj Assets) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Assets: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Assets) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `FeesReserves`:
	err = decoder.Decode(&obj.FeesReserves)
	if err != nil {
		return errors.NewField("FeesReserves", err)
	}
	// Deserialize `Owned`:
	err = decoder.Decode(&obj.Owned)
	if err != nil {
		return errors.NewField("Owned", err)
	}
	// Deserialize `Locked`:
	err = decoder.Decode(&obj.Locked)
	if err != nil {
		return errors.NewField("Locked", err)
	}
	// Deserialize `GuaranteedUsd`:
	err = decoder.Decode(&obj.GuaranteedUsd)
	if err != nil {
		return errors.NewField("GuaranteedUsd", err)
	}
	// Deserialize `GlobalShortSizes`:
	err = decoder.Decode(&obj.GlobalShortSizes)
	if err != nil {
		return errors.NewField("GlobalShortSizes", err)
	}
	// Deserialize `GlobalShortAveragePrices`:
	err = decoder.Decode(&obj.GlobalShortAveragePrices)
	if err != nil {
		return errors.NewField("GlobalShortAveragePrices", err)
	}
	return nil
}

func (obj *Assets) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Assets: %w", err)
	}
	return nil
}

func UnmarshalAssets(buf []byte) (*Assets, error) {
	obj := new(Assets)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PricingParams struct {
	TradeImpactFeeScalar uint64 `json:"tradeImpactFeeScalar"`
	Buffer               uint64 `json:"buffer"`
	SwapSpread           uint64 `json:"swapSpread"`
	MaxLeverage          uint64 `json:"maxLeverage"`
	MaxGlobalLongSizes   uint64 `json:"maxGlobalLongSizes"`
	MaxGlobalShortSizes  uint64 `json:"maxGlobalShortSizes"`
}

func (obj PricingParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TradeImpactFeeScalar`:
	err = encoder.Encode(obj.TradeImpactFeeScalar)
	if err != nil {
		return errors.NewField("TradeImpactFeeScalar", err)
	}
	// Serialize `Buffer`:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	// Serialize `SwapSpread`:
	err = encoder.Encode(obj.SwapSpread)
	if err != nil {
		return errors.NewField("SwapSpread", err)
	}
	// Serialize `MaxLeverage`:
	err = encoder.Encode(obj.MaxLeverage)
	if err != nil {
		return errors.NewField("MaxLeverage", err)
	}
	// Serialize `MaxGlobalLongSizes`:
	err = encoder.Encode(obj.MaxGlobalLongSizes)
	if err != nil {
		return errors.NewField("MaxGlobalLongSizes", err)
	}
	// Serialize `MaxGlobalShortSizes`:
	err = encoder.Encode(obj.MaxGlobalShortSizes)
	if err != nil {
		return errors.NewField("MaxGlobalShortSizes", err)
	}
	return nil
}

func (obj PricingParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PricingParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PricingParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TradeImpactFeeScalar`:
	err = decoder.Decode(&obj.TradeImpactFeeScalar)
	if err != nil {
		return errors.NewField("TradeImpactFeeScalar", err)
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	// Deserialize `SwapSpread`:
	err = decoder.Decode(&obj.SwapSpread)
	if err != nil {
		return errors.NewField("SwapSpread", err)
	}
	// Deserialize `MaxLeverage`:
	err = decoder.Decode(&obj.MaxLeverage)
	if err != nil {
		return errors.NewField("MaxLeverage", err)
	}
	// Deserialize `MaxGlobalLongSizes`:
	err = decoder.Decode(&obj.MaxGlobalLongSizes)
	if err != nil {
		return errors.NewField("MaxGlobalLongSizes", err)
	}
	// Deserialize `MaxGlobalShortSizes`:
	err = decoder.Decode(&obj.MaxGlobalShortSizes)
	if err != nil {
		return errors.NewField("MaxGlobalShortSizes", err)
	}
	return nil
}

func (obj *PricingParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PricingParams: %w", err)
	}
	return nil
}

func UnmarshalPricingParams(buf []byte) (*PricingParams, error) {
	obj := new(PricingParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type FundingRateState struct {
	CumulativeInterestRate binary.Uint128 `json:"cumulativeInterestRate"`
	LastUpdate             int64          `json:"lastUpdate"`
	HourlyFundingDbps      uint64         `json:"hourlyFundingDbps"`
}

func (obj FundingRateState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CumulativeInterestRate`:
	err = encoder.Encode(obj.CumulativeInterestRate)
	if err != nil {
		return errors.NewField("CumulativeInterestRate", err)
	}
	// Serialize `LastUpdate`:
	err = encoder.Encode(obj.LastUpdate)
	if err != nil {
		return errors.NewField("LastUpdate", err)
	}
	// Serialize `HourlyFundingDbps`:
	err = encoder.Encode(obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	return nil
}

func (obj FundingRateState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FundingRateState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FundingRateState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CumulativeInterestRate`:
	err = decoder.Decode(&obj.CumulativeInterestRate)
	if err != nil {
		return errors.NewField("CumulativeInterestRate", err)
	}
	// Deserialize `LastUpdate`:
	err = decoder.Decode(&obj.LastUpdate)
	if err != nil {
		return errors.NewField("LastUpdate", err)
	}
	// Deserialize `HourlyFundingDbps`:
	err = decoder.Decode(&obj.HourlyFundingDbps)
	if err != nil {
		return errors.NewField("HourlyFundingDbps", err)
	}
	return nil
}

func (obj *FundingRateState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FundingRateState: %w", err)
	}
	return nil
}

func UnmarshalFundingRateState(buf []byte) (*FundingRateState, error) {
	obj := new(FundingRateState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type JumpRateState struct {
	MinRateBps            uint64 `json:"minRateBps"`
	MaxRateBps            uint64 `json:"maxRateBps"`
	TargetRateBps         uint64 `json:"targetRateBps"`
	TargetUtilizationRate uint64 `json:"targetUtilizationRate"`
}

func (obj JumpRateState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MinRateBps`:
	err = encoder.Encode(obj.MinRateBps)
	if err != nil {
		return errors.NewField("MinRateBps", err)
	}
	// Serialize `MaxRateBps`:
	err = encoder.Encode(obj.MaxRateBps)
	if err != nil {
		return errors.NewField("MaxRateBps", err)
	}
	// Serialize `TargetRateBps`:
	err = encoder.Encode(obj.TargetRateBps)
	if err != nil {
		return errors.NewField("TargetRateBps", err)
	}
	// Serialize `TargetUtilizationRate`:
	err = encoder.Encode(obj.TargetUtilizationRate)
	if err != nil {
		return errors.NewField("TargetUtilizationRate", err)
	}
	return nil
}

func (obj JumpRateState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding JumpRateState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *JumpRateState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MinRateBps`:
	err = decoder.Decode(&obj.MinRateBps)
	if err != nil {
		return errors.NewField("MinRateBps", err)
	}
	// Deserialize `MaxRateBps`:
	err = decoder.Decode(&obj.MaxRateBps)
	if err != nil {
		return errors.NewField("MaxRateBps", err)
	}
	// Deserialize `TargetRateBps`:
	err = decoder.Decode(&obj.TargetRateBps)
	if err != nil {
		return errors.NewField("TargetRateBps", err)
	}
	// Deserialize `TargetUtilizationRate`:
	err = decoder.Decode(&obj.TargetUtilizationRate)
	if err != nil {
		return errors.NewField("TargetUtilizationRate", err)
	}
	return nil
}

func (obj *JumpRateState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling JumpRateState: %w", err)
	}
	return nil
}

func UnmarshalJumpRateState(buf []byte) (*JumpRateState, error) {
	obj := new(JumpRateState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OraclePrice struct {
	Price    uint64 `json:"price"`
	Exponent int32  `json:"exponent"`
}

func (obj OraclePrice) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `Exponent`:
	err = encoder.Encode(obj.Exponent)
	if err != nil {
		return errors.NewField("Exponent", err)
	}
	return nil
}

func (obj OraclePrice) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OraclePrice: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OraclePrice) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `Exponent`:
	err = decoder.Decode(&obj.Exponent)
	if err != nil {
		return errors.NewField("Exponent", err)
	}
	return nil
}

func (obj *OraclePrice) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OraclePrice: %w", err)
	}
	return nil
}

func UnmarshalOraclePrice(buf []byte) (*OraclePrice, error) {
	obj := new(OraclePrice)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Price struct {
	Price       uint64 `json:"price"`
	Expo        int32  `json:"expo"`
	PublishTime int64  `json:"publishTime"`
}

func (obj Price) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `Expo`:
	err = encoder.Encode(obj.Expo)
	if err != nil {
		return errors.NewField("Expo", err)
	}
	// Serialize `PublishTime`:
	err = encoder.Encode(obj.PublishTime)
	if err != nil {
		return errors.NewField("PublishTime", err)
	}
	return nil
}

func (obj Price) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Price: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Price) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `Expo`:
	err = decoder.Decode(&obj.Expo)
	if err != nil {
		return errors.NewField("Expo", err)
	}
	// Deserialize `PublishTime`:
	err = decoder.Decode(&obj.PublishTime)
	if err != nil {
		return errors.NewField("PublishTime", err)
	}
	return nil
}

func (obj *Price) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Price: %w", err)
	}
	return nil
}

func UnmarshalPrice(buf []byte) (*Price, error) {
	obj := new(Price)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type OracleParams struct {
	OracleAccount  solanago.PublicKey `json:"oracleAccount"`
	OracleType     OracleType         `json:"oracleType"`
	Buffer         uint64             `json:"buffer"`
	MaxPriceAgeSec uint32             `json:"maxPriceAgeSec"`
}

func (obj OracleParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `OracleAccount`:
	err = encoder.Encode(obj.OracleAccount)
	if err != nil {
		return errors.NewField("OracleAccount", err)
	}
	// Serialize `OracleType`:
	err = encoder.Encode(obj.OracleType)
	if err != nil {
		return errors.NewField("OracleType", err)
	}
	// Serialize `Buffer`:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	// Serialize `MaxPriceAgeSec`:
	err = encoder.Encode(obj.MaxPriceAgeSec)
	if err != nil {
		return errors.NewField("MaxPriceAgeSec", err)
	}
	return nil
}

func (obj OracleParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OracleParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OracleParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `OracleAccount`:
	err = decoder.Decode(&obj.OracleAccount)
	if err != nil {
		return errors.NewField("OracleAccount", err)
	}
	// Deserialize `OracleType`:
	err = decoder.Decode(&obj.OracleType)
	if err != nil {
		return errors.NewField("OracleType", err)
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	// Deserialize `MaxPriceAgeSec`:
	err = decoder.Decode(&obj.MaxPriceAgeSec)
	if err != nil {
		return errors.NewField("MaxPriceAgeSec", err)
	}
	return nil
}

func (obj *OracleParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OracleParams: %w", err)
	}
	return nil
}

func UnmarshalOracleParams(buf []byte) (*OracleParams, error) {
	obj := new(OracleParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AmountAndFee struct {
	Amount uint64 `json:"amount"`
	Fee    uint64 `json:"fee"`
	FeeBps uint64 `json:"feeBps"`
}

func (obj AmountAndFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `Fee`:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Serialize `FeeBps`:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	return nil
}

func (obj AmountAndFee) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AmountAndFee: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AmountAndFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return errors.NewField("Fee", err)
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	return nil
}

func (obj *AmountAndFee) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AmountAndFee: %w", err)
	}
	return nil
}

func UnmarshalAmountAndFee(buf []byte) (*AmountAndFee, error) {
	obj := new(AmountAndFee)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Permissions struct {
	AllowSwap                 bool `json:"allowSwap"`
	AllowAddLiquidity         bool `json:"allowAddLiquidity"`
	AllowRemoveLiquidity      bool `json:"allowRemoveLiquidity"`
	AllowIncreasePosition     bool `json:"allowIncreasePosition"`
	AllowDecreasePosition     bool `json:"allowDecreasePosition"`
	AllowCollateralWithdrawal bool `json:"allowCollateralWithdrawal"`
	AllowLiquidatePosition    bool `json:"allowLiquidatePosition"`
}

func (obj Permissions) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `AllowSwap`:
	err = encoder.Encode(obj.AllowSwap)
	if err != nil {
		return errors.NewField("AllowSwap", err)
	}
	// Serialize `AllowAddLiquidity`:
	err = encoder.Encode(obj.AllowAddLiquidity)
	if err != nil {
		return errors.NewField("AllowAddLiquidity", err)
	}
	// Serialize `AllowRemoveLiquidity`:
	err = encoder.Encode(obj.AllowRemoveLiquidity)
	if err != nil {
		return errors.NewField("AllowRemoveLiquidity", err)
	}
	// Serialize `AllowIncreasePosition`:
	err = encoder.Encode(obj.AllowIncreasePosition)
	if err != nil {
		return errors.NewField("AllowIncreasePosition", err)
	}
	// Serialize `AllowDecreasePosition`:
	err = encoder.Encode(obj.AllowDecreasePosition)
	if err != nil {
		return errors.NewField("AllowDecreasePosition", err)
	}
	// Serialize `AllowCollateralWithdrawal`:
	err = encoder.Encode(obj.AllowCollateralWithdrawal)
	if err != nil {
		return errors.NewField("AllowCollateralWithdrawal", err)
	}
	// Serialize `AllowLiquidatePosition`:
	err = encoder.Encode(obj.AllowLiquidatePosition)
	if err != nil {
		return errors.NewField("AllowLiquidatePosition", err)
	}
	return nil
}

func (obj Permissions) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Permissions: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Permissions) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `AllowSwap`:
	err = decoder.Decode(&obj.AllowSwap)
	if err != nil {
		return errors.NewField("AllowSwap", err)
	}
	// Deserialize `AllowAddLiquidity`:
	err = decoder.Decode(&obj.AllowAddLiquidity)
	if err != nil {
		return errors.NewField("AllowAddLiquidity", err)
	}
	// Deserialize `AllowRemoveLiquidity`:
	err = decoder.Decode(&obj.AllowRemoveLiquidity)
	if err != nil {
		return errors.NewField("AllowRemoveLiquidity", err)
	}
	// Deserialize `AllowIncreasePosition`:
	err = decoder.Decode(&obj.AllowIncreasePosition)
	if err != nil {
		return errors.NewField("AllowIncreasePosition", err)
	}
	// Deserialize `AllowDecreasePosition`:
	err = decoder.Decode(&obj.AllowDecreasePosition)
	if err != nil {
		return errors.NewField("AllowDecreasePosition", err)
	}
	// Deserialize `AllowCollateralWithdrawal`:
	err = decoder.Decode(&obj.AllowCollateralWithdrawal)
	if err != nil {
		return errors.NewField("AllowCollateralWithdrawal", err)
	}
	// Deserialize `AllowLiquidatePosition`:
	err = decoder.Decode(&obj.AllowLiquidatePosition)
	if err != nil {
		return errors.NewField("AllowLiquidatePosition", err)
	}
	return nil
}

func (obj *Permissions) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Permissions: %w", err)
	}
	return nil
}

func UnmarshalPermissions(buf []byte) (*Permissions, error) {
	obj := new(Permissions)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Fees struct {
	SwapMultiplier        uint64 `json:"swapMultiplier"`
	StableSwapMultiplier  uint64 `json:"stableSwapMultiplier"`
	AddRemoveLiquidityBps uint64 `json:"addRemoveLiquidityBps"`
	SwapBps               uint64 `json:"swapBps"`
	TaxBps                uint64 `json:"taxBps"`
	StableSwapBps         uint64 `json:"stableSwapBps"`
	StableSwapTaxBps      uint64 `json:"stableSwapTaxBps"`
	LiquidationRewardBps  uint64 `json:"liquidationRewardBps"`
	ProtocolShareBps      uint64 `json:"protocolShareBps"`
}

func (obj Fees) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SwapMultiplier`:
	err = encoder.Encode(obj.SwapMultiplier)
	if err != nil {
		return errors.NewField("SwapMultiplier", err)
	}
	// Serialize `StableSwapMultiplier`:
	err = encoder.Encode(obj.StableSwapMultiplier)
	if err != nil {
		return errors.NewField("StableSwapMultiplier", err)
	}
	// Serialize `AddRemoveLiquidityBps`:
	err = encoder.Encode(obj.AddRemoveLiquidityBps)
	if err != nil {
		return errors.NewField("AddRemoveLiquidityBps", err)
	}
	// Serialize `SwapBps`:
	err = encoder.Encode(obj.SwapBps)
	if err != nil {
		return errors.NewField("SwapBps", err)
	}
	// Serialize `TaxBps`:
	err = encoder.Encode(obj.TaxBps)
	if err != nil {
		return errors.NewField("TaxBps", err)
	}
	// Serialize `StableSwapBps`:
	err = encoder.Encode(obj.StableSwapBps)
	if err != nil {
		return errors.NewField("StableSwapBps", err)
	}
	// Serialize `StableSwapTaxBps`:
	err = encoder.Encode(obj.StableSwapTaxBps)
	if err != nil {
		return errors.NewField("StableSwapTaxBps", err)
	}
	// Serialize `LiquidationRewardBps`:
	err = encoder.Encode(obj.LiquidationRewardBps)
	if err != nil {
		return errors.NewField("LiquidationRewardBps", err)
	}
	// Serialize `ProtocolShareBps`:
	err = encoder.Encode(obj.ProtocolShareBps)
	if err != nil {
		return errors.NewField("ProtocolShareBps", err)
	}
	return nil
}

func (obj Fees) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Fees: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Fees) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SwapMultiplier`:
	err = decoder.Decode(&obj.SwapMultiplier)
	if err != nil {
		return errors.NewField("SwapMultiplier", err)
	}
	// Deserialize `StableSwapMultiplier`:
	err = decoder.Decode(&obj.StableSwapMultiplier)
	if err != nil {
		return errors.NewField("StableSwapMultiplier", err)
	}
	// Deserialize `AddRemoveLiquidityBps`:
	err = decoder.Decode(&obj.AddRemoveLiquidityBps)
	if err != nil {
		return errors.NewField("AddRemoveLiquidityBps", err)
	}
	// Deserialize `SwapBps`:
	err = decoder.Decode(&obj.SwapBps)
	if err != nil {
		return errors.NewField("SwapBps", err)
	}
	// Deserialize `TaxBps`:
	err = decoder.Decode(&obj.TaxBps)
	if err != nil {
		return errors.NewField("TaxBps", err)
	}
	// Deserialize `StableSwapBps`:
	err = decoder.Decode(&obj.StableSwapBps)
	if err != nil {
		return errors.NewField("StableSwapBps", err)
	}
	// Deserialize `StableSwapTaxBps`:
	err = decoder.Decode(&obj.StableSwapTaxBps)
	if err != nil {
		return errors.NewField("StableSwapTaxBps", err)
	}
	// Deserialize `LiquidationRewardBps`:
	err = decoder.Decode(&obj.LiquidationRewardBps)
	if err != nil {
		return errors.NewField("LiquidationRewardBps", err)
	}
	// Deserialize `ProtocolShareBps`:
	err = decoder.Decode(&obj.ProtocolShareBps)
	if err != nil {
		return errors.NewField("ProtocolShareBps", err)
	}
	return nil
}

func (obj *Fees) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Fees: %w", err)
	}
	return nil
}

func UnmarshalFees(buf []byte) (*Fees, error) {
	obj := new(Fees)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolApr struct {
	LastUpdated    int64  `json:"lastUpdated"`
	FeeAprBps      uint64 `json:"feeAprBps"`
	RealizedFeeUsd uint64 `json:"realizedFeeUsd"`
}

func (obj PoolApr) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `LastUpdated`:
	err = encoder.Encode(obj.LastUpdated)
	if err != nil {
		return errors.NewField("LastUpdated", err)
	}
	// Serialize `FeeAprBps`:
	err = encoder.Encode(obj.FeeAprBps)
	if err != nil {
		return errors.NewField("FeeAprBps", err)
	}
	// Serialize `RealizedFeeUsd`:
	err = encoder.Encode(obj.RealizedFeeUsd)
	if err != nil {
		return errors.NewField("RealizedFeeUsd", err)
	}
	return nil
}

func (obj PoolApr) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolApr: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolApr) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `LastUpdated`:
	err = decoder.Decode(&obj.LastUpdated)
	if err != nil {
		return errors.NewField("LastUpdated", err)
	}
	// Deserialize `FeeAprBps`:
	err = decoder.Decode(&obj.FeeAprBps)
	if err != nil {
		return errors.NewField("FeeAprBps", err)
	}
	// Deserialize `RealizedFeeUsd`:
	err = decoder.Decode(&obj.RealizedFeeUsd)
	if err != nil {
		return errors.NewField("RealizedFeeUsd", err)
	}
	return nil
}

func (obj *PoolApr) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolApr: %w", err)
	}
	return nil
}

func UnmarshalPoolApr(buf []byte) (*PoolApr, error) {
	obj := new(PoolApr)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Limit struct {
	MaxAumUsd               binary.Uint128 `json:"maxAumUsd"`
	TokenWeightageBufferBps binary.Uint128 `json:"tokenWeightageBufferBps"`
	Buffer                  uint64         `json:"buffer"`
}

func (obj Limit) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MaxAumUsd`:
	err = encoder.Encode(obj.MaxAumUsd)
	if err != nil {
		return errors.NewField("MaxAumUsd", err)
	}
	// Serialize `TokenWeightageBufferBps`:
	err = encoder.Encode(obj.TokenWeightageBufferBps)
	if err != nil {
		return errors.NewField("TokenWeightageBufferBps", err)
	}
	// Serialize `Buffer`:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	return nil
}

func (obj Limit) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Limit: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Limit) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MaxAumUsd`:
	err = decoder.Decode(&obj.MaxAumUsd)
	if err != nil {
		return errors.NewField("MaxAumUsd", err)
	}
	// Deserialize `TokenWeightageBufferBps`:
	err = decoder.Decode(&obj.TokenWeightageBufferBps)
	if err != nil {
		return errors.NewField("TokenWeightageBufferBps", err)
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return errors.NewField("Buffer", err)
	}
	return nil
}

func (obj *Limit) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Limit: %w", err)
	}
	return nil
}

func UnmarshalLimit(buf []byte) (*Limit, error) {
	obj := new(Limit)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PriceImpactMechanism binary.BorshEnum

const (
	PriceImpactMechanism_TradeSize PriceImpactMechanism = iota
	PriceImpactMechanism_DeltaImbalance
)

func (value PriceImpactMechanism) String() string {
	switch value {
	case PriceImpactMechanism_TradeSize:
		return "TradeSize"
	case PriceImpactMechanism_DeltaImbalance:
		return "DeltaImbalance"
	default:
		return ""
	}
}

type OracleType binary.BorshEnum

const (
	OracleType_None OracleType = iota
	OracleType_Test
	OracleType_Pyth
)

func (value OracleType) String() string {
	switch value {
	case OracleType_None:
		return "None"
	case OracleType_Test:
		return "Test"
	case OracleType_Pyth:
		return "Pyth"
	default:
		return ""
	}
}

type PriceCalcMode binary.BorshEnum

const (
	PriceCalcMode_Min PriceCalcMode = iota
	PriceCalcMode_Max
	PriceCalcMode_Ignore
)

func (value PriceCalcMode) String() string {
	switch value {
	case PriceCalcMode_Min:
		return "Min"
	case PriceCalcMode_Max:
		return "Max"
	case PriceCalcMode_Ignore:
		return "Ignore"
	default:
		return ""
	}
}

type PriceStaleTolerance binary.BorshEnum

const (
	PriceStaleTolerance_Strict PriceStaleTolerance = iota
	PriceStaleTolerance_Loose
)

func (value PriceStaleTolerance) String() string {
	switch value {
	case PriceStaleTolerance_Strict:
		return "Strict"
	case PriceStaleTolerance_Loose:
		return "Loose"
	default:
		return ""
	}
}

type TradePoolType binary.BorshEnum

const (
	TradePoolType_Increase TradePoolType = iota
	TradePoolType_Decrease
)

func (value TradePoolType) String() string {
	switch value {
	case TradePoolType_Increase:
		return "Increase"
	case TradePoolType_Decrease:
		return "Decrease"
	default:
		return ""
	}
}

type RequestType binary.BorshEnum

const (
	RequestType_Market RequestType = iota
	RequestType_Trigger
)

func (value RequestType) String() string {
	switch value {
	case RequestType_Market:
		return "Market"
	case RequestType_Trigger:
		return "Trigger"
	default:
		return ""
	}
}

type RequestChange binary.BorshEnum

const (
	RequestChange_None RequestChange = iota
	RequestChange_Increase
	RequestChange_Decrease
)

func (value RequestChange) String() string {
	switch value {
	case RequestChange_None:
		return "None"
	case RequestChange_Increase:
		return "Increase"
	case RequestChange_Decrease:
		return "Decrease"
	default:
		return ""
	}
}

type Side binary.BorshEnum

const (
	Side_None Side = iota
	Side_Long
	Side_Short
)

func (value Side) String() string {
	switch value {
	case Side_None:
		return "None"
	case Side_Long:
		return "Long"
	case Side_Short:
		return "Short"
	default:
		return ""
	}
}

type Custody struct {
	Pool                solanago.PublicKey `json:"pool"`
	Mint                solanago.PublicKey `json:"mint"`
	TokenAccount        solanago.PublicKey `json:"tokenAccount"`
	Decimals            uint8              `json:"decimals"`
	IsStable            bool               `json:"isStable"`
	Oracle              OracleParams       `json:"oracle"`
	Pricing             PricingParams      `json:"pricing"`
	Permissions         Permissions        `json:"permissions"`
	TargetRatioBps      uint64             `json:"targetRatioBps"`
	Assets              Assets             `json:"assets"`
	FundingRateState    FundingRateState   `json:"fundingRateState"`
	Bump                uint8              `json:"bump"`
	TokenAccountBump    uint8              `json:"tokenAccountBump"`
	IncreasePositionBps uint64             `json:"increasePositionBps"`
	DecreasePositionBps uint64             `json:"decreasePositionBps"`
	MaxPositionSizeUsd  uint64             `json:"maxPositionSizeUsd"`
	DovesOracle         solanago.PublicKey `json:"dovesOracle"`
	JumpRateState       JumpRateState      `json:"jumpRateState"`
	DovesAgOracle       solanago.PublicKey `json:"dovesAgOracle"`
	PriceImpactBuffer   PriceImpactBuffer  `json:"priceImpactBuffer"`
}

func (obj Custody) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `TokenAccount`:
	err = encoder.Encode(obj.TokenAccount)
	if err != nil {
		return errors.NewField("TokenAccount", err)
	}
	// Serialize `Decimals`:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return errors.NewField("Decimals", err)
	}
	// Serialize `IsStable`:
	err = encoder.Encode(obj.IsStable)
	if err != nil {
		return errors.NewField("IsStable", err)
	}
	// Serialize `Oracle`:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Serialize `Pricing`:
	err = encoder.Encode(obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Serialize `Permissions`:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Serialize `TargetRatioBps`:
	err = encoder.Encode(obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Serialize `Assets`:
	err = encoder.Encode(obj.Assets)
	if err != nil {
		return errors.NewField("Assets", err)
	}
	// Serialize `FundingRateState`:
	err = encoder.Encode(obj.FundingRateState)
	if err != nil {
		return errors.NewField("FundingRateState", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `TokenAccountBump`:
	err = encoder.Encode(obj.TokenAccountBump)
	if err != nil {
		return errors.NewField("TokenAccountBump", err)
	}
	// Serialize `IncreasePositionBps`:
	err = encoder.Encode(obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Serialize `DecreasePositionBps`:
	err = encoder.Encode(obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Serialize `MaxPositionSizeUsd`:
	err = encoder.Encode(obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Serialize `DovesOracle`:
	err = encoder.Encode(obj.DovesOracle)
	if err != nil {
		return errors.NewField("DovesOracle", err)
	}
	// Serialize `JumpRateState`:
	err = encoder.Encode(obj.JumpRateState)
	if err != nil {
		return errors.NewField("JumpRateState", err)
	}
	// Serialize `DovesAgOracle`:
	err = encoder.Encode(obj.DovesAgOracle)
	if err != nil {
		return errors.NewField("DovesAgOracle", err)
	}
	// Serialize `PriceImpactBuffer`:
	err = encoder.Encode(obj.PriceImpactBuffer)
	if err != nil {
		return errors.NewField("PriceImpactBuffer", err)
	}
	return nil
}

func (obj Custody) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Custody: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Custody) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `TokenAccount`:
	err = decoder.Decode(&obj.TokenAccount)
	if err != nil {
		return errors.NewField("TokenAccount", err)
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return errors.NewField("Decimals", err)
	}
	// Deserialize `IsStable`:
	err = decoder.Decode(&obj.IsStable)
	if err != nil {
		return errors.NewField("IsStable", err)
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return errors.NewField("Oracle", err)
	}
	// Deserialize `Pricing`:
	err = decoder.Decode(&obj.Pricing)
	if err != nil {
		return errors.NewField("Pricing", err)
	}
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Deserialize `TargetRatioBps`:
	err = decoder.Decode(&obj.TargetRatioBps)
	if err != nil {
		return errors.NewField("TargetRatioBps", err)
	}
	// Deserialize `Assets`:
	err = decoder.Decode(&obj.Assets)
	if err != nil {
		return errors.NewField("Assets", err)
	}
	// Deserialize `FundingRateState`:
	err = decoder.Decode(&obj.FundingRateState)
	if err != nil {
		return errors.NewField("FundingRateState", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `TokenAccountBump`:
	err = decoder.Decode(&obj.TokenAccountBump)
	if err != nil {
		return errors.NewField("TokenAccountBump", err)
	}
	// Deserialize `IncreasePositionBps`:
	err = decoder.Decode(&obj.IncreasePositionBps)
	if err != nil {
		return errors.NewField("IncreasePositionBps", err)
	}
	// Deserialize `DecreasePositionBps`:
	err = decoder.Decode(&obj.DecreasePositionBps)
	if err != nil {
		return errors.NewField("DecreasePositionBps", err)
	}
	// Deserialize `MaxPositionSizeUsd`:
	err = decoder.Decode(&obj.MaxPositionSizeUsd)
	if err != nil {
		return errors.NewField("MaxPositionSizeUsd", err)
	}
	// Deserialize `DovesOracle`:
	err = decoder.Decode(&obj.DovesOracle)
	if err != nil {
		return errors.NewField("DovesOracle", err)
	}
	// Deserialize `JumpRateState`:
	err = decoder.Decode(&obj.JumpRateState)
	if err != nil {
		return errors.NewField("JumpRateState", err)
	}
	// Deserialize `DovesAgOracle`:
	err = decoder.Decode(&obj.DovesAgOracle)
	if err != nil {
		return errors.NewField("DovesAgOracle", err)
	}
	// Deserialize `PriceImpactBuffer`:
	err = decoder.Decode(&obj.PriceImpactBuffer)
	if err != nil {
		return errors.NewField("PriceImpactBuffer", err)
	}
	return nil
}

func (obj *Custody) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Custody: %w", err)
	}
	return nil
}

func UnmarshalCustody(buf []byte) (*Custody, error) {
	obj := new(Custody)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Perpetuals struct {
	Permissions           Permissions          `json:"permissions"`
	Pools                 []solanago.PublicKey `json:"pools"`
	Admin                 solanago.PublicKey   `json:"admin"`
	TransferAuthorityBump uint8                `json:"transferAuthorityBump"`
	PerpetualsBump        uint8                `json:"perpetualsBump"`
	InceptionTime         int64                `json:"inceptionTime"`
}

func (obj Perpetuals) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Permissions`:
	err = encoder.Encode(obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Serialize `Pools`:
	err = encoder.Encode(obj.Pools)
	if err != nil {
		return errors.NewField("Pools", err)
	}
	// Serialize `Admin`:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Serialize `TransferAuthorityBump`:
	err = encoder.Encode(obj.TransferAuthorityBump)
	if err != nil {
		return errors.NewField("TransferAuthorityBump", err)
	}
	// Serialize `PerpetualsBump`:
	err = encoder.Encode(obj.PerpetualsBump)
	if err != nil {
		return errors.NewField("PerpetualsBump", err)
	}
	// Serialize `InceptionTime`:
	err = encoder.Encode(obj.InceptionTime)
	if err != nil {
		return errors.NewField("InceptionTime", err)
	}
	return nil
}

func (obj Perpetuals) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Perpetuals: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Perpetuals) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Permissions`:
	err = decoder.Decode(&obj.Permissions)
	if err != nil {
		return errors.NewField("Permissions", err)
	}
	// Deserialize `Pools`:
	err = decoder.Decode(&obj.Pools)
	if err != nil {
		return errors.NewField("Pools", err)
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Deserialize `TransferAuthorityBump`:
	err = decoder.Decode(&obj.TransferAuthorityBump)
	if err != nil {
		return errors.NewField("TransferAuthorityBump", err)
	}
	// Deserialize `PerpetualsBump`:
	err = decoder.Decode(&obj.PerpetualsBump)
	if err != nil {
		return errors.NewField("PerpetualsBump", err)
	}
	// Deserialize `InceptionTime`:
	err = decoder.Decode(&obj.InceptionTime)
	if err != nil {
		return errors.NewField("InceptionTime", err)
	}
	return nil
}

func (obj *Perpetuals) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Perpetuals: %w", err)
	}
	return nil
}

func UnmarshalPerpetuals(buf []byte) (*Perpetuals, error) {
	obj := new(Perpetuals)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Pool struct {
	Name                   string               `json:"name"`
	Custodies              []solanago.PublicKey `json:"custodies"`
	AumUsd                 binary.Uint128       `json:"aumUsd"`
	Limit                  Limit                `json:"limit"`
	Fees                   Fees                 `json:"fees"`
	PoolApr                PoolApr              `json:"poolApr"`
	MaxRequestExecutionSec int64                `json:"maxRequestExecutionSec"`
	Bump                   uint8                `json:"bump"`
	LpTokenBump            uint8                `json:"lpTokenBump"`
	InceptionTime          int64                `json:"inceptionTime"`
}

func (obj Pool) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Custodies`:
	err = encoder.Encode(obj.Custodies)
	if err != nil {
		return errors.NewField("Custodies", err)
	}
	// Serialize `AumUsd`:
	err = encoder.Encode(obj.AumUsd)
	if err != nil {
		return errors.NewField("AumUsd", err)
	}
	// Serialize `Limit`:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Serialize `Fees`:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Serialize `PoolApr`:
	err = encoder.Encode(obj.PoolApr)
	if err != nil {
		return errors.NewField("PoolApr", err)
	}
	// Serialize `MaxRequestExecutionSec`:
	err = encoder.Encode(obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `LpTokenBump`:
	err = encoder.Encode(obj.LpTokenBump)
	if err != nil {
		return errors.NewField("LpTokenBump", err)
	}
	// Serialize `InceptionTime`:
	err = encoder.Encode(obj.InceptionTime)
	if err != nil {
		return errors.NewField("InceptionTime", err)
	}
	return nil
}

func (obj Pool) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Pool: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Custodies`:
	err = decoder.Decode(&obj.Custodies)
	if err != nil {
		return errors.NewField("Custodies", err)
	}
	// Deserialize `AumUsd`:
	err = decoder.Decode(&obj.AumUsd)
	if err != nil {
		return errors.NewField("AumUsd", err)
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return errors.NewField("Limit", err)
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return errors.NewField("Fees", err)
	}
	// Deserialize `PoolApr`:
	err = decoder.Decode(&obj.PoolApr)
	if err != nil {
		return errors.NewField("PoolApr", err)
	}
	// Deserialize `MaxRequestExecutionSec`:
	err = decoder.Decode(&obj.MaxRequestExecutionSec)
	if err != nil {
		return errors.NewField("MaxRequestExecutionSec", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `LpTokenBump`:
	err = decoder.Decode(&obj.LpTokenBump)
	if err != nil {
		return errors.NewField("LpTokenBump", err)
	}
	// Deserialize `InceptionTime`:
	err = decoder.Decode(&obj.InceptionTime)
	if err != nil {
		return errors.NewField("InceptionTime", err)
	}
	return nil
}

func (obj *Pool) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Pool: %w", err)
	}
	return nil
}

func UnmarshalPool(buf []byte) (*Pool, error) {
	obj := new(Pool)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PositionRequest struct {
	Owner                 solanago.PublicKey  `json:"owner"`
	Pool                  solanago.PublicKey  `json:"pool"`
	Custody               solanago.PublicKey  `json:"custody"`
	Position              solanago.PublicKey  `json:"position"`
	Mint                  solanago.PublicKey  `json:"mint"`
	OpenTime              int64               `json:"openTime"`
	UpdateTime            int64               `json:"updateTime"`
	SizeUsdDelta          uint64              `json:"sizeUsdDelta"`
	CollateralDelta       uint64              `json:"collateralDelta"`
	RequestChange         RequestChange       `json:"requestChange"`
	RequestType           RequestType         `json:"requestType"`
	Side                  Side                `json:"side"`
	PriceSlippage         *uint64             `bin:"optional" json:"priceSlippage,omitempty"`
	JupiterMinimumOut     *uint64             `bin:"optional" json:"jupiterMinimumOut,omitempty"`
	PreSwapAmount         *uint64             `bin:"optional" json:"preSwapAmount,omitempty"`
	TriggerPrice          *uint64             `bin:"optional" json:"triggerPrice,omitempty"`
	TriggerAboveThreshold *bool               `bin:"optional" json:"triggerAboveThreshold,omitempty"`
	EntirePosition        *bool               `bin:"optional" json:"entirePosition,omitempty"`
	Executed              bool                `json:"executed"`
	Counter               uint64              `json:"counter"`
	Bump                  uint8               `json:"bump"`
	Referral              *solanago.PublicKey `bin:"optional" json:"referral,omitempty"`
}

func (obj PositionRequest) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Custody`:
	err = encoder.Encode(obj.Custody)
	if err != nil {
		return errors.NewField("Custody", err)
	}
	// Serialize `Position`:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `UpdateTime`:
	err = encoder.Encode(obj.UpdateTime)
	if err != nil {
		return errors.NewField("UpdateTime", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralDelta`:
	err = encoder.Encode(obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Serialize `RequestChange`:
	err = encoder.Encode(obj.RequestChange)
	if err != nil {
		return errors.NewField("RequestChange", err)
	}
	// Serialize `RequestType`:
	err = encoder.Encode(obj.RequestType)
	if err != nil {
		return errors.NewField("RequestType", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Serialize `PriceSlippage` (optional):
	{
		if obj.PriceSlippage == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Serialize `JupiterMinimumOut` (optional):
	{
		if obj.JupiterMinimumOut == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Serialize `PreSwapAmount` (optional):
	{
		if obj.PreSwapAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PreSwapAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PreSwapAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PreSwapAmount)
			if err != nil {
				return errors.NewField("PreSwapAmount", err)
			}
		}
	}
	// Serialize `TriggerPrice` (optional):
	{
		if obj.TriggerPrice == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerPrice", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Serialize `TriggerAboveThreshold` (optional):
	{
		if obj.TriggerAboveThreshold == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TriggerAboveThreshold", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TriggerAboveThreshold", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TriggerAboveThreshold)
			if err != nil {
				return errors.NewField("TriggerAboveThreshold", err)
			}
		}
	}
	// Serialize `EntirePosition` (optional):
	{
		if obj.EntirePosition == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Serialize `Executed`:
	err = encoder.Encode(obj.Executed)
	if err != nil {
		return errors.NewField("Executed", err)
	}
	// Serialize `Counter`:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Serialize `Referral` (optional):
	{
		if obj.Referral == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	return nil
}

func (obj PositionRequest) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PositionRequest: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PositionRequest) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Custody`:
	err = decoder.Decode(&obj.Custody)
	if err != nil {
		return errors.NewField("Custody", err)
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return errors.NewField("Position", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `UpdateTime`:
	err = decoder.Decode(&obj.UpdateTime)
	if err != nil {
		return errors.NewField("UpdateTime", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralDelta`:
	err = decoder.Decode(&obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Deserialize `RequestChange`:
	err = decoder.Decode(&obj.RequestChange)
	if err != nil {
		return errors.NewField("RequestChange", err)
	}
	// Deserialize `RequestType`:
	err = decoder.Decode(&obj.RequestType)
	if err != nil {
		return errors.NewField("RequestType", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Deserialize `PriceSlippage` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PriceSlippage", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Deserialize `JupiterMinimumOut` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Deserialize `PreSwapAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PreSwapAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PreSwapAmount)
			if err != nil {
				return errors.NewField("PreSwapAmount", err)
			}
		}
	}
	// Deserialize `TriggerPrice` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerPrice", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerPrice)
			if err != nil {
				return errors.NewField("TriggerPrice", err)
			}
		}
	}
	// Deserialize `TriggerAboveThreshold` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TriggerAboveThreshold", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TriggerAboveThreshold)
			if err != nil {
				return errors.NewField("TriggerAboveThreshold", err)
			}
		}
	}
	// Deserialize `EntirePosition` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("EntirePosition", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Deserialize `Executed`:
	err = decoder.Decode(&obj.Executed)
	if err != nil {
		return errors.NewField("Executed", err)
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return errors.NewField("Counter", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	// Deserialize `Referral` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Referral", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	return nil
}

func (obj *PositionRequest) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PositionRequest: %w", err)
	}
	return nil
}

func UnmarshalPositionRequest(buf []byte) (*PositionRequest, error) {
	obj := new(PositionRequest)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Position struct {
	Owner                      solanago.PublicKey `json:"owner"`
	Pool                       solanago.PublicKey `json:"pool"`
	Custody                    solanago.PublicKey `json:"custody"`
	CollateralCustody          solanago.PublicKey `json:"collateralCustody"`
	OpenTime                   int64              `json:"openTime"`
	UpdateTime                 int64              `json:"updateTime"`
	Side                       Side               `json:"side"`
	Price                      uint64             `json:"price"`
	SizeUsd                    uint64             `json:"sizeUsd"`
	CollateralUsd              uint64             `json:"collateralUsd"`
	RealisedPnlUsd             int64              `json:"realisedPnlUsd"`
	CumulativeInterestSnapshot binary.Uint128     `json:"cumulativeInterestSnapshot"`
	LockedAmount               uint64             `json:"lockedAmount"`
	Bump                       uint8              `json:"bump"`
}

func (obj Position) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Custody`:
	err = encoder.Encode(obj.Custody)
	if err != nil {
		return errors.NewField("Custody", err)
	}
	// Serialize `CollateralCustody`:
	err = encoder.Encode(obj.CollateralCustody)
	if err != nil {
		return errors.NewField("CollateralCustody", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `UpdateTime`:
	err = encoder.Encode(obj.UpdateTime)
	if err != nil {
		return errors.NewField("UpdateTime", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `SizeUsd`:
	err = encoder.Encode(obj.SizeUsd)
	if err != nil {
		return errors.NewField("SizeUsd", err)
	}
	// Serialize `CollateralUsd`:
	err = encoder.Encode(obj.CollateralUsd)
	if err != nil {
		return errors.NewField("CollateralUsd", err)
	}
	// Serialize `RealisedPnlUsd`:
	err = encoder.Encode(obj.RealisedPnlUsd)
	if err != nil {
		return errors.NewField("RealisedPnlUsd", err)
	}
	// Serialize `CumulativeInterestSnapshot`:
	err = encoder.Encode(obj.CumulativeInterestSnapshot)
	if err != nil {
		return errors.NewField("CumulativeInterestSnapshot", err)
	}
	// Serialize `LockedAmount`:
	err = encoder.Encode(obj.LockedAmount)
	if err != nil {
		return errors.NewField("LockedAmount", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj Position) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Position: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Custody`:
	err = decoder.Decode(&obj.Custody)
	if err != nil {
		return errors.NewField("Custody", err)
	}
	// Deserialize `CollateralCustody`:
	err = decoder.Decode(&obj.CollateralCustody)
	if err != nil {
		return errors.NewField("CollateralCustody", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `UpdateTime`:
	err = decoder.Decode(&obj.UpdateTime)
	if err != nil {
		return errors.NewField("UpdateTime", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `SizeUsd`:
	err = decoder.Decode(&obj.SizeUsd)
	if err != nil {
		return errors.NewField("SizeUsd", err)
	}
	// Deserialize `CollateralUsd`:
	err = decoder.Decode(&obj.CollateralUsd)
	if err != nil {
		return errors.NewField("CollateralUsd", err)
	}
	// Deserialize `RealisedPnlUsd`:
	err = decoder.Decode(&obj.RealisedPnlUsd)
	if err != nil {
		return errors.NewField("RealisedPnlUsd", err)
	}
	// Deserialize `CumulativeInterestSnapshot`:
	err = decoder.Decode(&obj.CumulativeInterestSnapshot)
	if err != nil {
		return errors.NewField("CumulativeInterestSnapshot", err)
	}
	// Deserialize `LockedAmount`:
	err = decoder.Decode(&obj.LockedAmount)
	if err != nil {
		return errors.NewField("LockedAmount", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *Position) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Position: %w", err)
	}
	return nil
}

func UnmarshalPosition(buf []byte) (*Position, error) {
	obj := new(Position)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TokenLedger struct {
	TokenAccount solanago.PublicKey `json:"tokenAccount"`
	Amount       uint64             `json:"amount"`
}

func (obj TokenLedger) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TokenAccount`:
	err = encoder.Encode(obj.TokenAccount)
	if err != nil {
		return errors.NewField("TokenAccount", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj TokenLedger) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TokenLedger: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TokenLedger) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TokenAccount`:
	err = decoder.Decode(&obj.TokenAccount)
	if err != nil {
		return errors.NewField("TokenAccount", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *TokenLedger) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TokenLedger: %w", err)
	}
	return nil
}

func UnmarshalTokenLedger(buf []byte) (*TokenLedger, error) {
	obj := new(TokenLedger)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type CreatePositionRequestEvent struct {
	Owner                     solanago.PublicKey  `json:"owner"`
	Pool                      solanago.PublicKey  `json:"pool"`
	PositionKey               solanago.PublicKey  `json:"positionKey"`
	PositionSide              uint8               `json:"positionSide"`
	PositionMint              solanago.PublicKey  `json:"positionMint"`
	PositionCustody           solanago.PublicKey  `json:"positionCustody"`
	PositionCollateralMint    solanago.PublicKey  `json:"positionCollateralMint"`
	PositionCollateralCustody solanago.PublicKey  `json:"positionCollateralCustody"`
	PositionRequestKey        solanago.PublicKey  `json:"positionRequestKey"`
	PositionRequestMint       solanago.PublicKey  `json:"positionRequestMint"`
	SizeUsdDelta              uint64              `json:"sizeUsdDelta"`
	CollateralDelta           uint64              `json:"collateralDelta"`
	PriceSlippage             *uint64             `bin:"optional" json:"priceSlippage,omitempty"`
	JupiterMinimumOut         *uint64             `bin:"optional" json:"jupiterMinimumOut,omitempty"`
	PreSwapAmount             *uint64             `bin:"optional" json:"preSwapAmount,omitempty"`
	RequestChange             uint8               `json:"requestChange"`
	OpenTime                  int64               `json:"openTime"`
	Referral                  *solanago.PublicKey `bin:"optional" json:"referral,omitempty"`
}

func (obj CreatePositionRequestEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralMint`:
	err = encoder.Encode(obj.PositionCollateralMint)
	if err != nil {
		return errors.NewField("PositionCollateralMint", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `PositionRequestMint`:
	err = encoder.Encode(obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralDelta`:
	err = encoder.Encode(obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Serialize `PriceSlippage` (optional):
	{
		if obj.PriceSlippage == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Serialize `JupiterMinimumOut` (optional):
	{
		if obj.JupiterMinimumOut == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Serialize `PreSwapAmount` (optional):
	{
		if obj.PreSwapAmount == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PreSwapAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PreSwapAmount", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PreSwapAmount)
			if err != nil {
				return errors.NewField("PreSwapAmount", err)
			}
		}
	}
	// Serialize `RequestChange`:
	err = encoder.Encode(obj.RequestChange)
	if err != nil {
		return errors.NewField("RequestChange", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `Referral` (optional):
	{
		if obj.Referral == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	return nil
}

func (obj CreatePositionRequestEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreatePositionRequestEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreatePositionRequestEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralMint`:
	err = decoder.Decode(&obj.PositionCollateralMint)
	if err != nil {
		return errors.NewField("PositionCollateralMint", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `PositionRequestMint`:
	err = decoder.Decode(&obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralDelta`:
	err = decoder.Decode(&obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Deserialize `PriceSlippage` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PriceSlippage", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Deserialize `JupiterMinimumOut` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	// Deserialize `PreSwapAmount` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PreSwapAmount", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PreSwapAmount)
			if err != nil {
				return errors.NewField("PreSwapAmount", err)
			}
		}
	}
	// Deserialize `RequestChange`:
	err = decoder.Decode(&obj.RequestChange)
	if err != nil {
		return errors.NewField("RequestChange", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `Referral` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Referral", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	return nil
}

func (obj *CreatePositionRequestEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreatePositionRequestEvent: %w", err)
	}
	return nil
}

func UnmarshalCreatePositionRequestEvent(buf []byte) (*CreatePositionRequestEvent, error) {
	obj := new(CreatePositionRequestEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantCreateTpslEvent struct {
	Owner                     solanago.PublicKey `json:"owner"`
	Pool                      solanago.PublicKey `json:"pool"`
	PositionKey               solanago.PublicKey `json:"positionKey"`
	PositionSide              uint8              `json:"positionSide"`
	PositionMint              solanago.PublicKey `json:"positionMint"`
	PositionCustody           solanago.PublicKey `json:"positionCustody"`
	PositionCollateralCustody solanago.PublicKey `json:"positionCollateralCustody"`
	PositionRequestKey        solanago.PublicKey `json:"positionRequestKey"`
	PositionRequestMint       solanago.PublicKey `json:"positionRequestMint"`
	SizeUsdDelta              uint64             `json:"sizeUsdDelta"`
	CollateralDelta           uint64             `json:"collateralDelta"`
	EntirePosition            bool               `json:"entirePosition"`
	OpenTime                  int64              `json:"openTime"`
}

func (obj InstantCreateTpslEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `PositionRequestMint`:
	err = encoder.Encode(obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralDelta`:
	err = encoder.Encode(obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Serialize `EntirePosition`:
	err = encoder.Encode(obj.EntirePosition)
	if err != nil {
		return errors.NewField("EntirePosition", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	return nil
}

func (obj InstantCreateTpslEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantCreateTpslEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantCreateTpslEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `PositionRequestMint`:
	err = decoder.Decode(&obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralDelta`:
	err = decoder.Decode(&obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Deserialize `EntirePosition`:
	err = decoder.Decode(&obj.EntirePosition)
	if err != nil {
		return errors.NewField("EntirePosition", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	return nil
}

func (obj *InstantCreateTpslEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantCreateTpslEvent: %w", err)
	}
	return nil
}

func UnmarshalInstantCreateTpslEvent(buf []byte) (*InstantCreateTpslEvent, error) {
	obj := new(InstantCreateTpslEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantUpdateTpslEvent struct {
	Owner                     solanago.PublicKey `json:"owner"`
	Pool                      solanago.PublicKey `json:"pool"`
	PositionKey               solanago.PublicKey `json:"positionKey"`
	PositionSide              uint8              `json:"positionSide"`
	PositionMint              solanago.PublicKey `json:"positionMint"`
	PositionCustody           solanago.PublicKey `json:"positionCustody"`
	PositionCollateralCustody solanago.PublicKey `json:"positionCollateralCustody"`
	PositionRequestKey        solanago.PublicKey `json:"positionRequestKey"`
	PositionRequestMint       solanago.PublicKey `json:"positionRequestMint"`
	SizeUsdDelta              uint64             `json:"sizeUsdDelta"`
	CollateralDelta           uint64             `json:"collateralDelta"`
	EntirePosition            bool               `json:"entirePosition"`
	UpdateTime                int64              `json:"updateTime"`
}

func (obj InstantUpdateTpslEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `PositionRequestMint`:
	err = encoder.Encode(obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralDelta`:
	err = encoder.Encode(obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Serialize `EntirePosition`:
	err = encoder.Encode(obj.EntirePosition)
	if err != nil {
		return errors.NewField("EntirePosition", err)
	}
	// Serialize `UpdateTime`:
	err = encoder.Encode(obj.UpdateTime)
	if err != nil {
		return errors.NewField("UpdateTime", err)
	}
	return nil
}

func (obj InstantUpdateTpslEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantUpdateTpslEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantUpdateTpslEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `PositionRequestMint`:
	err = decoder.Decode(&obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralDelta`:
	err = decoder.Decode(&obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Deserialize `EntirePosition`:
	err = decoder.Decode(&obj.EntirePosition)
	if err != nil {
		return errors.NewField("EntirePosition", err)
	}
	// Deserialize `UpdateTime`:
	err = decoder.Decode(&obj.UpdateTime)
	if err != nil {
		return errors.NewField("UpdateTime", err)
	}
	return nil
}

func (obj *InstantUpdateTpslEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantUpdateTpslEvent: %w", err)
	}
	return nil
}

func UnmarshalInstantUpdateTpslEvent(buf []byte) (*InstantUpdateTpslEvent, error) {
	obj := new(InstantUpdateTpslEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClosePositionRequestEvent struct {
	EntirePosition     *bool              `bin:"optional" json:"entirePosition,omitempty"`
	Executed           bool               `json:"executed"`
	RequestChange      uint8              `json:"requestChange"`
	RequestType        uint8              `json:"requestType"`
	Side               uint8              `json:"side"`
	PositionRequestKey solanago.PublicKey `json:"positionRequestKey"`
	Owner              solanago.PublicKey `json:"owner"`
	Mint               solanago.PublicKey `json:"mint"`
	Amount             uint64             `json:"amount"`
}

func (obj ClosePositionRequestEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `EntirePosition` (optional):
	{
		if obj.EntirePosition == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("EntirePosition", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Serialize `Executed`:
	err = encoder.Encode(obj.Executed)
	if err != nil {
		return errors.NewField("Executed", err)
	}
	// Serialize `RequestChange`:
	err = encoder.Encode(obj.RequestChange)
	if err != nil {
		return errors.NewField("RequestChange", err)
	}
	// Serialize `RequestType`:
	err = encoder.Encode(obj.RequestType)
	if err != nil {
		return errors.NewField("RequestType", err)
	}
	// Serialize `Side`:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Mint`:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj ClosePositionRequestEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClosePositionRequestEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClosePositionRequestEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `EntirePosition` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("EntirePosition", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.EntirePosition)
			if err != nil {
				return errors.NewField("EntirePosition", err)
			}
		}
	}
	// Deserialize `Executed`:
	err = decoder.Decode(&obj.Executed)
	if err != nil {
		return errors.NewField("Executed", err)
	}
	// Deserialize `RequestChange`:
	err = decoder.Decode(&obj.RequestChange)
	if err != nil {
		return errors.NewField("RequestChange", err)
	}
	// Deserialize `RequestType`:
	err = decoder.Decode(&obj.RequestType)
	if err != nil {
		return errors.NewField("RequestType", err)
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return errors.NewField("Side", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return errors.NewField("Mint", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	return nil
}

func (obj *ClosePositionRequestEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClosePositionRequestEvent: %w", err)
	}
	return nil
}

func UnmarshalClosePositionRequestEvent(buf []byte) (*ClosePositionRequestEvent, error) {
	obj := new(ClosePositionRequestEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreasePositionEvent struct {
	PositionKey                    solanago.PublicKey  `json:"positionKey"`
	PositionSide                   uint8               `json:"positionSide"`
	PositionCustody                solanago.PublicKey  `json:"positionCustody"`
	PositionCollateralCustody      solanago.PublicKey  `json:"positionCollateralCustody"`
	PositionSizeUsd                uint64              `json:"positionSizeUsd"`
	PositionMint                   solanago.PublicKey  `json:"positionMint"`
	PositionRequestKey             solanago.PublicKey  `json:"positionRequestKey"`
	PositionRequestMint            solanago.PublicKey  `json:"positionRequestMint"`
	PositionRequestChange          uint8               `json:"positionRequestChange"`
	PositionRequestType            uint8               `json:"positionRequestType"`
	PositionRequestCollateralDelta uint64              `json:"positionRequestCollateralDelta"`
	Owner                          solanago.PublicKey  `json:"owner"`
	Pool                           solanago.PublicKey  `json:"pool"`
	SizeUsdDelta                   uint64              `json:"sizeUsdDelta"`
	CollateralUsdDelta             uint64              `json:"collateralUsdDelta"`
	CollateralTokenDelta           uint64              `json:"collateralTokenDelta"`
	Price                          uint64              `json:"price"`
	PriceSlippage                  *uint64             `bin:"optional" json:"priceSlippage,omitempty"`
	FeeToken                       uint64              `json:"feeToken"`
	FeeUsd                         uint64              `json:"feeUsd"`
	OpenTime                       int64               `json:"openTime"`
	Referral                       *solanago.PublicKey `bin:"optional" json:"referral,omitempty"`
	PositionFeeUsd                 uint64              `json:"positionFeeUsd"`
	FundingFeeUsd                  uint64              `json:"fundingFeeUsd"`
	PriceImpactFeeUsd              uint64              `json:"priceImpactFeeUsd"`
}

func (obj IncreasePositionEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionSizeUsd`:
	err = encoder.Encode(obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `PositionRequestMint`:
	err = encoder.Encode(obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Serialize `PositionRequestChange`:
	err = encoder.Encode(obj.PositionRequestChange)
	if err != nil {
		return errors.NewField("PositionRequestChange", err)
	}
	// Serialize `PositionRequestType`:
	err = encoder.Encode(obj.PositionRequestType)
	if err != nil {
		return errors.NewField("PositionRequestType", err)
	}
	// Serialize `PositionRequestCollateralDelta`:
	err = encoder.Encode(obj.PositionRequestCollateralDelta)
	if err != nil {
		return errors.NewField("PositionRequestCollateralDelta", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralUsdDelta`:
	err = encoder.Encode(obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Serialize `CollateralTokenDelta`:
	err = encoder.Encode(obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `PriceSlippage` (optional):
	{
		if obj.PriceSlippage == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Serialize `FeeToken`:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return errors.NewField("FeeToken", err)
	}
	// Serialize `FeeUsd`:
	err = encoder.Encode(obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `Referral` (optional):
	{
		if obj.Referral == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Serialize `PositionFeeUsd`:
	err = encoder.Encode(obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Serialize `FundingFeeUsd`:
	err = encoder.Encode(obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Serialize `PriceImpactFeeUsd`:
	err = encoder.Encode(obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	return nil
}

func (obj IncreasePositionEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreasePositionEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreasePositionEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionSizeUsd`:
	err = decoder.Decode(&obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `PositionRequestMint`:
	err = decoder.Decode(&obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Deserialize `PositionRequestChange`:
	err = decoder.Decode(&obj.PositionRequestChange)
	if err != nil {
		return errors.NewField("PositionRequestChange", err)
	}
	// Deserialize `PositionRequestType`:
	err = decoder.Decode(&obj.PositionRequestType)
	if err != nil {
		return errors.NewField("PositionRequestType", err)
	}
	// Deserialize `PositionRequestCollateralDelta`:
	err = decoder.Decode(&obj.PositionRequestCollateralDelta)
	if err != nil {
		return errors.NewField("PositionRequestCollateralDelta", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralUsdDelta`:
	err = decoder.Decode(&obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Deserialize `CollateralTokenDelta`:
	err = decoder.Decode(&obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `PriceSlippage` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PriceSlippage", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return errors.NewField("FeeToken", err)
	}
	// Deserialize `FeeUsd`:
	err = decoder.Decode(&obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `Referral` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Referral", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Deserialize `PositionFeeUsd`:
	err = decoder.Decode(&obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Deserialize `FundingFeeUsd`:
	err = decoder.Decode(&obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Deserialize `PriceImpactFeeUsd`:
	err = decoder.Decode(&obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	return nil
}

func (obj *IncreasePositionEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreasePositionEvent: %w", err)
	}
	return nil
}

func UnmarshalIncreasePositionEvent(buf []byte) (*IncreasePositionEvent, error) {
	obj := new(IncreasePositionEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IncreasePositionPreSwapEvent struct {
	PositionRequestKey             solanago.PublicKey `json:"positionRequestKey"`
	TransferAmount                 uint64             `json:"transferAmount"`
	CollateralCustodyPreSwapAmount uint64             `json:"collateralCustodyPreSwapAmount"`
}

func (obj IncreasePositionPreSwapEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `TransferAmount`:
	err = encoder.Encode(obj.TransferAmount)
	if err != nil {
		return errors.NewField("TransferAmount", err)
	}
	// Serialize `CollateralCustodyPreSwapAmount`:
	err = encoder.Encode(obj.CollateralCustodyPreSwapAmount)
	if err != nil {
		return errors.NewField("CollateralCustodyPreSwapAmount", err)
	}
	return nil
}

func (obj IncreasePositionPreSwapEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IncreasePositionPreSwapEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IncreasePositionPreSwapEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `TransferAmount`:
	err = decoder.Decode(&obj.TransferAmount)
	if err != nil {
		return errors.NewField("TransferAmount", err)
	}
	// Deserialize `CollateralCustodyPreSwapAmount`:
	err = decoder.Decode(&obj.CollateralCustodyPreSwapAmount)
	if err != nil {
		return errors.NewField("CollateralCustodyPreSwapAmount", err)
	}
	return nil
}

func (obj *IncreasePositionPreSwapEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IncreasePositionPreSwapEvent: %w", err)
	}
	return nil
}

func UnmarshalIncreasePositionPreSwapEvent(buf []byte) (*IncreasePositionPreSwapEvent, error) {
	obj := new(IncreasePositionPreSwapEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DecreasePositionEvent struct {
	PositionKey                   solanago.PublicKey  `json:"positionKey"`
	PositionSide                  uint8               `json:"positionSide"`
	PositionCustody               solanago.PublicKey  `json:"positionCustody"`
	PositionCollateralCustody     solanago.PublicKey  `json:"positionCollateralCustody"`
	PositionSizeUsd               uint64              `json:"positionSizeUsd"`
	PositionMint                  solanago.PublicKey  `json:"positionMint"`
	PositionRequestKey            solanago.PublicKey  `json:"positionRequestKey"`
	PositionRequestMint           solanago.PublicKey  `json:"positionRequestMint"`
	PositionRequestChange         uint8               `json:"positionRequestChange"`
	PositionRequestType           uint8               `json:"positionRequestType"`
	HasProfit                     bool                `json:"hasProfit"`
	PnlDelta                      uint64              `json:"pnlDelta"`
	Owner                         solanago.PublicKey  `json:"owner"`
	Pool                          solanago.PublicKey  `json:"pool"`
	SizeUsdDelta                  uint64              `json:"sizeUsdDelta"`
	TransferAmountUsd             uint64              `json:"transferAmountUsd"`
	TransferToken                 *uint64             `bin:"optional" json:"transferToken,omitempty"`
	Price                         uint64              `json:"price"`
	PriceSlippage                 *uint64             `bin:"optional" json:"priceSlippage,omitempty"`
	FeeUsd                        uint64              `json:"feeUsd"`
	OpenTime                      int64               `json:"openTime"`
	Referral                      *solanago.PublicKey `bin:"optional" json:"referral,omitempty"`
	PositionFeeUsd                uint64              `json:"positionFeeUsd"`
	FundingFeeUsd                 uint64              `json:"fundingFeeUsd"`
	PriceImpactFeeUsd             uint64              `json:"priceImpactFeeUsd"`
	OriginalPositionCollateralUsd uint64              `json:"originalPositionCollateralUsd"`
	PositionCollateralUsd         uint64              `json:"positionCollateralUsd"`
	PositionOpenTime              int64               `json:"positionOpenTime"`
	PositionPrice                 uint64              `json:"positionPrice"`
}

func (obj DecreasePositionEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionSizeUsd`:
	err = encoder.Encode(obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `PositionRequestMint`:
	err = encoder.Encode(obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Serialize `PositionRequestChange`:
	err = encoder.Encode(obj.PositionRequestChange)
	if err != nil {
		return errors.NewField("PositionRequestChange", err)
	}
	// Serialize `PositionRequestType`:
	err = encoder.Encode(obj.PositionRequestType)
	if err != nil {
		return errors.NewField("PositionRequestType", err)
	}
	// Serialize `HasProfit`:
	err = encoder.Encode(obj.HasProfit)
	if err != nil {
		return errors.NewField("HasProfit", err)
	}
	// Serialize `PnlDelta`:
	err = encoder.Encode(obj.PnlDelta)
	if err != nil {
		return errors.NewField("PnlDelta", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `TransferAmountUsd`:
	err = encoder.Encode(obj.TransferAmountUsd)
	if err != nil {
		return errors.NewField("TransferAmountUsd", err)
	}
	// Serialize `TransferToken` (optional):
	{
		if obj.TransferToken == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("TransferToken", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("TransferToken", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.TransferToken)
			if err != nil {
				return errors.NewField("TransferToken", err)
			}
		}
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `PriceSlippage` (optional):
	{
		if obj.PriceSlippage == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("PriceSlippage", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Serialize `FeeUsd`:
	err = encoder.Encode(obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `Referral` (optional):
	{
		if obj.Referral == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Serialize `PositionFeeUsd`:
	err = encoder.Encode(obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Serialize `FundingFeeUsd`:
	err = encoder.Encode(obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Serialize `PriceImpactFeeUsd`:
	err = encoder.Encode(obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	// Serialize `OriginalPositionCollateralUsd`:
	err = encoder.Encode(obj.OriginalPositionCollateralUsd)
	if err != nil {
		return errors.NewField("OriginalPositionCollateralUsd", err)
	}
	// Serialize `PositionCollateralUsd`:
	err = encoder.Encode(obj.PositionCollateralUsd)
	if err != nil {
		return errors.NewField("PositionCollateralUsd", err)
	}
	// Serialize `PositionOpenTime`:
	err = encoder.Encode(obj.PositionOpenTime)
	if err != nil {
		return errors.NewField("PositionOpenTime", err)
	}
	// Serialize `PositionPrice`:
	err = encoder.Encode(obj.PositionPrice)
	if err != nil {
		return errors.NewField("PositionPrice", err)
	}
	return nil
}

func (obj DecreasePositionEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DecreasePositionEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DecreasePositionEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionSizeUsd`:
	err = decoder.Decode(&obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `PositionRequestMint`:
	err = decoder.Decode(&obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Deserialize `PositionRequestChange`:
	err = decoder.Decode(&obj.PositionRequestChange)
	if err != nil {
		return errors.NewField("PositionRequestChange", err)
	}
	// Deserialize `PositionRequestType`:
	err = decoder.Decode(&obj.PositionRequestType)
	if err != nil {
		return errors.NewField("PositionRequestType", err)
	}
	// Deserialize `HasProfit`:
	err = decoder.Decode(&obj.HasProfit)
	if err != nil {
		return errors.NewField("HasProfit", err)
	}
	// Deserialize `PnlDelta`:
	err = decoder.Decode(&obj.PnlDelta)
	if err != nil {
		return errors.NewField("PnlDelta", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `TransferAmountUsd`:
	err = decoder.Decode(&obj.TransferAmountUsd)
	if err != nil {
		return errors.NewField("TransferAmountUsd", err)
	}
	// Deserialize `TransferToken` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("TransferToken", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.TransferToken)
			if err != nil {
				return errors.NewField("TransferToken", err)
			}
		}
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `PriceSlippage` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("PriceSlippage", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.PriceSlippage)
			if err != nil {
				return errors.NewField("PriceSlippage", err)
			}
		}
	}
	// Deserialize `FeeUsd`:
	err = decoder.Decode(&obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `Referral` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Referral", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Deserialize `PositionFeeUsd`:
	err = decoder.Decode(&obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Deserialize `FundingFeeUsd`:
	err = decoder.Decode(&obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Deserialize `PriceImpactFeeUsd`:
	err = decoder.Decode(&obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	// Deserialize `OriginalPositionCollateralUsd`:
	err = decoder.Decode(&obj.OriginalPositionCollateralUsd)
	if err != nil {
		return errors.NewField("OriginalPositionCollateralUsd", err)
	}
	// Deserialize `PositionCollateralUsd`:
	err = decoder.Decode(&obj.PositionCollateralUsd)
	if err != nil {
		return errors.NewField("PositionCollateralUsd", err)
	}
	// Deserialize `PositionOpenTime`:
	err = decoder.Decode(&obj.PositionOpenTime)
	if err != nil {
		return errors.NewField("PositionOpenTime", err)
	}
	// Deserialize `PositionPrice`:
	err = decoder.Decode(&obj.PositionPrice)
	if err != nil {
		return errors.NewField("PositionPrice", err)
	}
	return nil
}

func (obj *DecreasePositionEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DecreasePositionEvent: %w", err)
	}
	return nil
}

func UnmarshalDecreasePositionEvent(buf []byte) (*DecreasePositionEvent, error) {
	obj := new(DecreasePositionEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type DecreasePositionPostSwapEvent struct {
	PositionRequestKey solanago.PublicKey `json:"positionRequestKey"`
	SwapAmount         uint64             `json:"swapAmount"`
	JupiterMinimumOut  *uint64            `bin:"optional" json:"jupiterMinimumOut,omitempty"`
}

func (obj DecreasePositionPostSwapEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `SwapAmount`:
	err = encoder.Encode(obj.SwapAmount)
	if err != nil {
		return errors.NewField("SwapAmount", err)
	}
	// Serialize `JupiterMinimumOut` (optional):
	{
		if obj.JupiterMinimumOut == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	return nil
}

func (obj DecreasePositionPostSwapEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DecreasePositionPostSwapEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DecreasePositionPostSwapEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `SwapAmount`:
	err = decoder.Decode(&obj.SwapAmount)
	if err != nil {
		return errors.NewField("SwapAmount", err)
	}
	// Deserialize `JupiterMinimumOut` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("JupiterMinimumOut", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.JupiterMinimumOut)
			if err != nil {
				return errors.NewField("JupiterMinimumOut", err)
			}
		}
	}
	return nil
}

func (obj *DecreasePositionPostSwapEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DecreasePositionPostSwapEvent: %w", err)
	}
	return nil
}

func UnmarshalDecreasePositionPostSwapEvent(buf []byte) (*DecreasePositionPostSwapEvent, error) {
	obj := new(DecreasePositionPostSwapEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LiquidateFullPositionEvent struct {
	PositionKey                   solanago.PublicKey `json:"positionKey"`
	PositionSide                  uint8              `json:"positionSide"`
	PositionCustody               solanago.PublicKey `json:"positionCustody"`
	PositionCollateralCustody     solanago.PublicKey `json:"positionCollateralCustody"`
	PositionCollateralMint        solanago.PublicKey `json:"positionCollateralMint"`
	PositionMint                  solanago.PublicKey `json:"positionMint"`
	PositionSizeUsd               uint64             `json:"positionSizeUsd"`
	HasProfit                     bool               `json:"hasProfit"`
	PnlDelta                      uint64             `json:"pnlDelta"`
	Owner                         solanago.PublicKey `json:"owner"`
	Pool                          solanago.PublicKey `json:"pool"`
	TransferAmountUsd             uint64             `json:"transferAmountUsd"`
	TransferToken                 uint64             `json:"transferToken"`
	Price                         uint64             `json:"price"`
	FeeUsd                        uint64             `json:"feeUsd"`
	LiquidationFeeUsd             uint64             `json:"liquidationFeeUsd"`
	OpenTime                      int64              `json:"openTime"`
	PositionFeeUsd                uint64             `json:"positionFeeUsd"`
	FundingFeeUsd                 uint64             `json:"fundingFeeUsd"`
	PriceImpactFeeUsd             uint64             `json:"priceImpactFeeUsd"`
	OriginalPositionCollateralUsd uint64             `json:"originalPositionCollateralUsd"`
	PositionCollateralUsd         uint64             `json:"positionCollateralUsd"`
	PositionOpenTime              int64              `json:"positionOpenTime"`
	PositionPrice                 uint64             `json:"positionPrice"`
}

func (obj LiquidateFullPositionEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionCollateralMint`:
	err = encoder.Encode(obj.PositionCollateralMint)
	if err != nil {
		return errors.NewField("PositionCollateralMint", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionSizeUsd`:
	err = encoder.Encode(obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Serialize `HasProfit`:
	err = encoder.Encode(obj.HasProfit)
	if err != nil {
		return errors.NewField("HasProfit", err)
	}
	// Serialize `PnlDelta`:
	err = encoder.Encode(obj.PnlDelta)
	if err != nil {
		return errors.NewField("PnlDelta", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `TransferAmountUsd`:
	err = encoder.Encode(obj.TransferAmountUsd)
	if err != nil {
		return errors.NewField("TransferAmountUsd", err)
	}
	// Serialize `TransferToken`:
	err = encoder.Encode(obj.TransferToken)
	if err != nil {
		return errors.NewField("TransferToken", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `FeeUsd`:
	err = encoder.Encode(obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Serialize `LiquidationFeeUsd`:
	err = encoder.Encode(obj.LiquidationFeeUsd)
	if err != nil {
		return errors.NewField("LiquidationFeeUsd", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `PositionFeeUsd`:
	err = encoder.Encode(obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Serialize `FundingFeeUsd`:
	err = encoder.Encode(obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Serialize `PriceImpactFeeUsd`:
	err = encoder.Encode(obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	// Serialize `OriginalPositionCollateralUsd`:
	err = encoder.Encode(obj.OriginalPositionCollateralUsd)
	if err != nil {
		return errors.NewField("OriginalPositionCollateralUsd", err)
	}
	// Serialize `PositionCollateralUsd`:
	err = encoder.Encode(obj.PositionCollateralUsd)
	if err != nil {
		return errors.NewField("PositionCollateralUsd", err)
	}
	// Serialize `PositionOpenTime`:
	err = encoder.Encode(obj.PositionOpenTime)
	if err != nil {
		return errors.NewField("PositionOpenTime", err)
	}
	// Serialize `PositionPrice`:
	err = encoder.Encode(obj.PositionPrice)
	if err != nil {
		return errors.NewField("PositionPrice", err)
	}
	return nil
}

func (obj LiquidateFullPositionEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LiquidateFullPositionEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LiquidateFullPositionEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionCollateralMint`:
	err = decoder.Decode(&obj.PositionCollateralMint)
	if err != nil {
		return errors.NewField("PositionCollateralMint", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionSizeUsd`:
	err = decoder.Decode(&obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Deserialize `HasProfit`:
	err = decoder.Decode(&obj.HasProfit)
	if err != nil {
		return errors.NewField("HasProfit", err)
	}
	// Deserialize `PnlDelta`:
	err = decoder.Decode(&obj.PnlDelta)
	if err != nil {
		return errors.NewField("PnlDelta", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `TransferAmountUsd`:
	err = decoder.Decode(&obj.TransferAmountUsd)
	if err != nil {
		return errors.NewField("TransferAmountUsd", err)
	}
	// Deserialize `TransferToken`:
	err = decoder.Decode(&obj.TransferToken)
	if err != nil {
		return errors.NewField("TransferToken", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `FeeUsd`:
	err = decoder.Decode(&obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Deserialize `LiquidationFeeUsd`:
	err = decoder.Decode(&obj.LiquidationFeeUsd)
	if err != nil {
		return errors.NewField("LiquidationFeeUsd", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `PositionFeeUsd`:
	err = decoder.Decode(&obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Deserialize `FundingFeeUsd`:
	err = decoder.Decode(&obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Deserialize `PriceImpactFeeUsd`:
	err = decoder.Decode(&obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	// Deserialize `OriginalPositionCollateralUsd`:
	err = decoder.Decode(&obj.OriginalPositionCollateralUsd)
	if err != nil {
		return errors.NewField("OriginalPositionCollateralUsd", err)
	}
	// Deserialize `PositionCollateralUsd`:
	err = decoder.Decode(&obj.PositionCollateralUsd)
	if err != nil {
		return errors.NewField("PositionCollateralUsd", err)
	}
	// Deserialize `PositionOpenTime`:
	err = decoder.Decode(&obj.PositionOpenTime)
	if err != nil {
		return errors.NewField("PositionOpenTime", err)
	}
	// Deserialize `PositionPrice`:
	err = decoder.Decode(&obj.PositionPrice)
	if err != nil {
		return errors.NewField("PositionPrice", err)
	}
	return nil
}

func (obj *LiquidateFullPositionEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LiquidateFullPositionEvent: %w", err)
	}
	return nil
}

func UnmarshalLiquidateFullPositionEvent(buf []byte) (*LiquidateFullPositionEvent, error) {
	obj := new(LiquidateFullPositionEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolSwapEvent struct {
	ReceivingCustodyKey  solanago.PublicKey `json:"receivingCustodyKey"`
	DispensingCustodyKey solanago.PublicKey `json:"dispensingCustodyKey"`
	PoolKey              solanago.PublicKey `json:"poolKey"`
	AmountIn             uint64             `json:"amountIn"`
	AmountOut            uint64             `json:"amountOut"`
	SwapUsdAmount        uint64             `json:"swapUsdAmount"`
	AmountOutAfterFees   uint64             `json:"amountOutAfterFees"`
	FeeBps               uint64             `json:"feeBps"`
	OwnerKey             solanago.PublicKey `json:"ownerKey"`
	ReceivingAccountKey  solanago.PublicKey `json:"receivingAccountKey"`
}

func (obj PoolSwapEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ReceivingCustodyKey`:
	err = encoder.Encode(obj.ReceivingCustodyKey)
	if err != nil {
		return errors.NewField("ReceivingCustodyKey", err)
	}
	// Serialize `DispensingCustodyKey`:
	err = encoder.Encode(obj.DispensingCustodyKey)
	if err != nil {
		return errors.NewField("DispensingCustodyKey", err)
	}
	// Serialize `PoolKey`:
	err = encoder.Encode(obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `AmountOut`:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Serialize `SwapUsdAmount`:
	err = encoder.Encode(obj.SwapUsdAmount)
	if err != nil {
		return errors.NewField("SwapUsdAmount", err)
	}
	// Serialize `AmountOutAfterFees`:
	err = encoder.Encode(obj.AmountOutAfterFees)
	if err != nil {
		return errors.NewField("AmountOutAfterFees", err)
	}
	// Serialize `FeeBps`:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Serialize `OwnerKey`:
	err = encoder.Encode(obj.OwnerKey)
	if err != nil {
		return errors.NewField("OwnerKey", err)
	}
	// Serialize `ReceivingAccountKey`:
	err = encoder.Encode(obj.ReceivingAccountKey)
	if err != nil {
		return errors.NewField("ReceivingAccountKey", err)
	}
	return nil
}

func (obj PoolSwapEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolSwapEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolSwapEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ReceivingCustodyKey`:
	err = decoder.Decode(&obj.ReceivingCustodyKey)
	if err != nil {
		return errors.NewField("ReceivingCustodyKey", err)
	}
	// Deserialize `DispensingCustodyKey`:
	err = decoder.Decode(&obj.DispensingCustodyKey)
	if err != nil {
		return errors.NewField("DispensingCustodyKey", err)
	}
	// Deserialize `PoolKey`:
	err = decoder.Decode(&obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Deserialize `SwapUsdAmount`:
	err = decoder.Decode(&obj.SwapUsdAmount)
	if err != nil {
		return errors.NewField("SwapUsdAmount", err)
	}
	// Deserialize `AmountOutAfterFees`:
	err = decoder.Decode(&obj.AmountOutAfterFees)
	if err != nil {
		return errors.NewField("AmountOutAfterFees", err)
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Deserialize `OwnerKey`:
	err = decoder.Decode(&obj.OwnerKey)
	if err != nil {
		return errors.NewField("OwnerKey", err)
	}
	// Deserialize `ReceivingAccountKey`:
	err = decoder.Decode(&obj.ReceivingAccountKey)
	if err != nil {
		return errors.NewField("ReceivingAccountKey", err)
	}
	return nil
}

func (obj *PoolSwapEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolSwapEvent: %w", err)
	}
	return nil
}

func UnmarshalPoolSwapEvent(buf []byte) (*PoolSwapEvent, error) {
	obj := new(PoolSwapEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PoolSwapExactOutEvent struct {
	ReceivingCustodyKey  solanago.PublicKey `json:"receivingCustodyKey"`
	DispensingCustodyKey solanago.PublicKey `json:"dispensingCustodyKey"`
	PoolKey              solanago.PublicKey `json:"poolKey"`
	AmountIn             uint64             `json:"amountIn"`
	AmountInAfterFees    uint64             `json:"amountInAfterFees"`
	AmountOut            uint64             `json:"amountOut"`
	SwapUsdAmount        uint64             `json:"swapUsdAmount"`
	FeeBps               uint64             `json:"feeBps"`
	OwnerKey             solanago.PublicKey `json:"ownerKey"`
	ReceivingAccountKey  solanago.PublicKey `json:"receivingAccountKey"`
}

func (obj PoolSwapExactOutEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ReceivingCustodyKey`:
	err = encoder.Encode(obj.ReceivingCustodyKey)
	if err != nil {
		return errors.NewField("ReceivingCustodyKey", err)
	}
	// Serialize `DispensingCustodyKey`:
	err = encoder.Encode(obj.DispensingCustodyKey)
	if err != nil {
		return errors.NewField("DispensingCustodyKey", err)
	}
	// Serialize `PoolKey`:
	err = encoder.Encode(obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `AmountInAfterFees`:
	err = encoder.Encode(obj.AmountInAfterFees)
	if err != nil {
		return errors.NewField("AmountInAfterFees", err)
	}
	// Serialize `AmountOut`:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Serialize `SwapUsdAmount`:
	err = encoder.Encode(obj.SwapUsdAmount)
	if err != nil {
		return errors.NewField("SwapUsdAmount", err)
	}
	// Serialize `FeeBps`:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Serialize `OwnerKey`:
	err = encoder.Encode(obj.OwnerKey)
	if err != nil {
		return errors.NewField("OwnerKey", err)
	}
	// Serialize `ReceivingAccountKey`:
	err = encoder.Encode(obj.ReceivingAccountKey)
	if err != nil {
		return errors.NewField("ReceivingAccountKey", err)
	}
	return nil
}

func (obj PoolSwapExactOutEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolSwapExactOutEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolSwapExactOutEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ReceivingCustodyKey`:
	err = decoder.Decode(&obj.ReceivingCustodyKey)
	if err != nil {
		return errors.NewField("ReceivingCustodyKey", err)
	}
	// Deserialize `DispensingCustodyKey`:
	err = decoder.Decode(&obj.DispensingCustodyKey)
	if err != nil {
		return errors.NewField("DispensingCustodyKey", err)
	}
	// Deserialize `PoolKey`:
	err = decoder.Decode(&obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `AmountInAfterFees`:
	err = decoder.Decode(&obj.AmountInAfterFees)
	if err != nil {
		return errors.NewField("AmountInAfterFees", err)
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Deserialize `SwapUsdAmount`:
	err = decoder.Decode(&obj.SwapUsdAmount)
	if err != nil {
		return errors.NewField("SwapUsdAmount", err)
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Deserialize `OwnerKey`:
	err = decoder.Decode(&obj.OwnerKey)
	if err != nil {
		return errors.NewField("OwnerKey", err)
	}
	// Deserialize `ReceivingAccountKey`:
	err = decoder.Decode(&obj.ReceivingAccountKey)
	if err != nil {
		return errors.NewField("ReceivingAccountKey", err)
	}
	return nil
}

func (obj *PoolSwapExactOutEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolSwapExactOutEvent: %w", err)
	}
	return nil
}

func UnmarshalPoolSwapExactOutEvent(buf []byte) (*PoolSwapExactOutEvent, error) {
	obj := new(PoolSwapExactOutEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type AddLiquidityEvent struct {
	CustodyKey          solanago.PublicKey `json:"custodyKey"`
	PoolKey             solanago.PublicKey `json:"poolKey"`
	TokenAmountIn       uint64             `json:"tokenAmountIn"`
	PrePoolAmountUsd    binary.Uint128     `json:"prePoolAmountUsd"`
	TokenAmountUsd      uint64             `json:"tokenAmountUsd"`
	FeeBps              uint64             `json:"feeBps"`
	TokenAmountAfterFee uint64             `json:"tokenAmountAfterFee"`
	MintAmountUsd       uint64             `json:"mintAmountUsd"`
	LpAmount            uint64             `json:"lpAmount"`
	PostPoolAmountUsd   binary.Uint128     `json:"postPoolAmountUsd"`
}

func (obj AddLiquidityEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CustodyKey`:
	err = encoder.Encode(obj.CustodyKey)
	if err != nil {
		return errors.NewField("CustodyKey", err)
	}
	// Serialize `PoolKey`:
	err = encoder.Encode(obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Serialize `TokenAmountIn`:
	err = encoder.Encode(obj.TokenAmountIn)
	if err != nil {
		return errors.NewField("TokenAmountIn", err)
	}
	// Serialize `PrePoolAmountUsd`:
	err = encoder.Encode(obj.PrePoolAmountUsd)
	if err != nil {
		return errors.NewField("PrePoolAmountUsd", err)
	}
	// Serialize `TokenAmountUsd`:
	err = encoder.Encode(obj.TokenAmountUsd)
	if err != nil {
		return errors.NewField("TokenAmountUsd", err)
	}
	// Serialize `FeeBps`:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Serialize `TokenAmountAfterFee`:
	err = encoder.Encode(obj.TokenAmountAfterFee)
	if err != nil {
		return errors.NewField("TokenAmountAfterFee", err)
	}
	// Serialize `MintAmountUsd`:
	err = encoder.Encode(obj.MintAmountUsd)
	if err != nil {
		return errors.NewField("MintAmountUsd", err)
	}
	// Serialize `LpAmount`:
	err = encoder.Encode(obj.LpAmount)
	if err != nil {
		return errors.NewField("LpAmount", err)
	}
	// Serialize `PostPoolAmountUsd`:
	err = encoder.Encode(obj.PostPoolAmountUsd)
	if err != nil {
		return errors.NewField("PostPoolAmountUsd", err)
	}
	return nil
}

func (obj AddLiquidityEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AddLiquidityEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AddLiquidityEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CustodyKey`:
	err = decoder.Decode(&obj.CustodyKey)
	if err != nil {
		return errors.NewField("CustodyKey", err)
	}
	// Deserialize `PoolKey`:
	err = decoder.Decode(&obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Deserialize `TokenAmountIn`:
	err = decoder.Decode(&obj.TokenAmountIn)
	if err != nil {
		return errors.NewField("TokenAmountIn", err)
	}
	// Deserialize `PrePoolAmountUsd`:
	err = decoder.Decode(&obj.PrePoolAmountUsd)
	if err != nil {
		return errors.NewField("PrePoolAmountUsd", err)
	}
	// Deserialize `TokenAmountUsd`:
	err = decoder.Decode(&obj.TokenAmountUsd)
	if err != nil {
		return errors.NewField("TokenAmountUsd", err)
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Deserialize `TokenAmountAfterFee`:
	err = decoder.Decode(&obj.TokenAmountAfterFee)
	if err != nil {
		return errors.NewField("TokenAmountAfterFee", err)
	}
	// Deserialize `MintAmountUsd`:
	err = decoder.Decode(&obj.MintAmountUsd)
	if err != nil {
		return errors.NewField("MintAmountUsd", err)
	}
	// Deserialize `LpAmount`:
	err = decoder.Decode(&obj.LpAmount)
	if err != nil {
		return errors.NewField("LpAmount", err)
	}
	// Deserialize `PostPoolAmountUsd`:
	err = decoder.Decode(&obj.PostPoolAmountUsd)
	if err != nil {
		return errors.NewField("PostPoolAmountUsd", err)
	}
	return nil
}

func (obj *AddLiquidityEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AddLiquidityEvent: %w", err)
	}
	return nil
}

func UnmarshalAddLiquidityEvent(buf []byte) (*AddLiquidityEvent, error) {
	obj := new(AddLiquidityEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type RemoveLiquidityEvent struct {
	CustodyKey          solanago.PublicKey `json:"custodyKey"`
	PoolKey             solanago.PublicKey `json:"poolKey"`
	LpAmountIn          uint64             `json:"lpAmountIn"`
	RemoveAmountUsd     uint64             `json:"removeAmountUsd"`
	FeeBps              uint64             `json:"feeBps"`
	RemoveTokenAmount   uint64             `json:"removeTokenAmount"`
	TokenAmountAfterFee uint64             `json:"tokenAmountAfterFee"`
	PostPoolAmountUsd   binary.Uint128     `json:"postPoolAmountUsd"`
}

func (obj RemoveLiquidityEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `CustodyKey`:
	err = encoder.Encode(obj.CustodyKey)
	if err != nil {
		return errors.NewField("CustodyKey", err)
	}
	// Serialize `PoolKey`:
	err = encoder.Encode(obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Serialize `LpAmountIn`:
	err = encoder.Encode(obj.LpAmountIn)
	if err != nil {
		return errors.NewField("LpAmountIn", err)
	}
	// Serialize `RemoveAmountUsd`:
	err = encoder.Encode(obj.RemoveAmountUsd)
	if err != nil {
		return errors.NewField("RemoveAmountUsd", err)
	}
	// Serialize `FeeBps`:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Serialize `RemoveTokenAmount`:
	err = encoder.Encode(obj.RemoveTokenAmount)
	if err != nil {
		return errors.NewField("RemoveTokenAmount", err)
	}
	// Serialize `TokenAmountAfterFee`:
	err = encoder.Encode(obj.TokenAmountAfterFee)
	if err != nil {
		return errors.NewField("TokenAmountAfterFee", err)
	}
	// Serialize `PostPoolAmountUsd`:
	err = encoder.Encode(obj.PostPoolAmountUsd)
	if err != nil {
		return errors.NewField("PostPoolAmountUsd", err)
	}
	return nil
}

func (obj RemoveLiquidityEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RemoveLiquidityEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RemoveLiquidityEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `CustodyKey`:
	err = decoder.Decode(&obj.CustodyKey)
	if err != nil {
		return errors.NewField("CustodyKey", err)
	}
	// Deserialize `PoolKey`:
	err = decoder.Decode(&obj.PoolKey)
	if err != nil {
		return errors.NewField("PoolKey", err)
	}
	// Deserialize `LpAmountIn`:
	err = decoder.Decode(&obj.LpAmountIn)
	if err != nil {
		return errors.NewField("LpAmountIn", err)
	}
	// Deserialize `RemoveAmountUsd`:
	err = decoder.Decode(&obj.RemoveAmountUsd)
	if err != nil {
		return errors.NewField("RemoveAmountUsd", err)
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return errors.NewField("FeeBps", err)
	}
	// Deserialize `RemoveTokenAmount`:
	err = decoder.Decode(&obj.RemoveTokenAmount)
	if err != nil {
		return errors.NewField("RemoveTokenAmount", err)
	}
	// Deserialize `TokenAmountAfterFee`:
	err = decoder.Decode(&obj.TokenAmountAfterFee)
	if err != nil {
		return errors.NewField("TokenAmountAfterFee", err)
	}
	// Deserialize `PostPoolAmountUsd`:
	err = decoder.Decode(&obj.PostPoolAmountUsd)
	if err != nil {
		return errors.NewField("PostPoolAmountUsd", err)
	}
	return nil
}

func (obj *RemoveLiquidityEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RemoveLiquidityEvent: %w", err)
	}
	return nil
}

func UnmarshalRemoveLiquidityEvent(buf []byte) (*RemoveLiquidityEvent, error) {
	obj := new(RemoveLiquidityEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantCreateLimitOrderEvent struct {
	Owner                     solanago.PublicKey `json:"owner"`
	Pool                      solanago.PublicKey `json:"pool"`
	PositionKey               solanago.PublicKey `json:"positionKey"`
	PositionSide              uint8              `json:"positionSide"`
	PositionMint              solanago.PublicKey `json:"positionMint"`
	PositionCustody           solanago.PublicKey `json:"positionCustody"`
	PositionCollateralMint    solanago.PublicKey `json:"positionCollateralMint"`
	PositionCollateralCustody solanago.PublicKey `json:"positionCollateralCustody"`
	PositionRequestKey        solanago.PublicKey `json:"positionRequestKey"`
	PositionRequestMint       solanago.PublicKey `json:"positionRequestMint"`
	SizeUsdDelta              uint64             `json:"sizeUsdDelta"`
	CollateralDelta           uint64             `json:"collateralDelta"`
	OpenTime                  int64              `json:"openTime"`
}

func (obj InstantCreateLimitOrderEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralMint`:
	err = encoder.Encode(obj.PositionCollateralMint)
	if err != nil {
		return errors.NewField("PositionCollateralMint", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionRequestKey`:
	err = encoder.Encode(obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Serialize `PositionRequestMint`:
	err = encoder.Encode(obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralDelta`:
	err = encoder.Encode(obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	return nil
}

func (obj InstantCreateLimitOrderEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantCreateLimitOrderEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantCreateLimitOrderEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralMint`:
	err = decoder.Decode(&obj.PositionCollateralMint)
	if err != nil {
		return errors.NewField("PositionCollateralMint", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionRequestKey`:
	err = decoder.Decode(&obj.PositionRequestKey)
	if err != nil {
		return errors.NewField("PositionRequestKey", err)
	}
	// Deserialize `PositionRequestMint`:
	err = decoder.Decode(&obj.PositionRequestMint)
	if err != nil {
		return errors.NewField("PositionRequestMint", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralDelta`:
	err = decoder.Decode(&obj.CollateralDelta)
	if err != nil {
		return errors.NewField("CollateralDelta", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	return nil
}

func (obj *InstantCreateLimitOrderEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantCreateLimitOrderEvent: %w", err)
	}
	return nil
}

func UnmarshalInstantCreateLimitOrderEvent(buf []byte) (*InstantCreateLimitOrderEvent, error) {
	obj := new(InstantCreateLimitOrderEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantIncreasePositionEvent struct {
	PositionKey               solanago.PublicKey  `json:"positionKey"`
	PositionSide              uint8               `json:"positionSide"`
	PositionCustody           solanago.PublicKey  `json:"positionCustody"`
	PositionCollateralCustody solanago.PublicKey  `json:"positionCollateralCustody"`
	PositionSizeUsd           uint64              `json:"positionSizeUsd"`
	PositionMint              solanago.PublicKey  `json:"positionMint"`
	Owner                     solanago.PublicKey  `json:"owner"`
	Pool                      solanago.PublicKey  `json:"pool"`
	SizeUsdDelta              uint64              `json:"sizeUsdDelta"`
	CollateralUsdDelta        uint64              `json:"collateralUsdDelta"`
	CollateralTokenDelta      uint64              `json:"collateralTokenDelta"`
	Price                     uint64              `json:"price"`
	PriceSlippage             uint64              `json:"priceSlippage"`
	FeeToken                  uint64              `json:"feeToken"`
	FeeUsd                    uint64              `json:"feeUsd"`
	OpenTime                  int64               `json:"openTime"`
	Referral                  *solanago.PublicKey `bin:"optional" json:"referral,omitempty"`
	PositionFeeUsd            uint64              `json:"positionFeeUsd"`
	FundingFeeUsd             uint64              `json:"fundingFeeUsd"`
	PriceImpactFeeUsd         uint64              `json:"priceImpactFeeUsd"`
}

func (obj InstantIncreasePositionEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionSizeUsd`:
	err = encoder.Encode(obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `CollateralUsdDelta`:
	err = encoder.Encode(obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Serialize `CollateralTokenDelta`:
	err = encoder.Encode(obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `PriceSlippage`:
	err = encoder.Encode(obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Serialize `FeeToken`:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return errors.NewField("FeeToken", err)
	}
	// Serialize `FeeUsd`:
	err = encoder.Encode(obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `Referral` (optional):
	{
		if obj.Referral == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Serialize `PositionFeeUsd`:
	err = encoder.Encode(obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Serialize `FundingFeeUsd`:
	err = encoder.Encode(obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Serialize `PriceImpactFeeUsd`:
	err = encoder.Encode(obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	return nil
}

func (obj InstantIncreasePositionEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantIncreasePositionEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantIncreasePositionEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionSizeUsd`:
	err = decoder.Decode(&obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `CollateralUsdDelta`:
	err = decoder.Decode(&obj.CollateralUsdDelta)
	if err != nil {
		return errors.NewField("CollateralUsdDelta", err)
	}
	// Deserialize `CollateralTokenDelta`:
	err = decoder.Decode(&obj.CollateralTokenDelta)
	if err != nil {
		return errors.NewField("CollateralTokenDelta", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `PriceSlippage`:
	err = decoder.Decode(&obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return errors.NewField("FeeToken", err)
	}
	// Deserialize `FeeUsd`:
	err = decoder.Decode(&obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `Referral` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Referral", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Deserialize `PositionFeeUsd`:
	err = decoder.Decode(&obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Deserialize `FundingFeeUsd`:
	err = decoder.Decode(&obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Deserialize `PriceImpactFeeUsd`:
	err = decoder.Decode(&obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	return nil
}

func (obj *InstantIncreasePositionEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantIncreasePositionEvent: %w", err)
	}
	return nil
}

func UnmarshalInstantIncreasePositionEvent(buf []byte) (*InstantIncreasePositionEvent, error) {
	obj := new(InstantIncreasePositionEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type InstantDecreasePositionEvent struct {
	PositionKey                   solanago.PublicKey  `json:"positionKey"`
	PositionSide                  uint8               `json:"positionSide"`
	PositionCustody               solanago.PublicKey  `json:"positionCustody"`
	PositionCollateralCustody     solanago.PublicKey  `json:"positionCollateralCustody"`
	PositionSizeUsd               uint64              `json:"positionSizeUsd"`
	PositionMint                  solanago.PublicKey  `json:"positionMint"`
	DesiredMint                   solanago.PublicKey  `json:"desiredMint"`
	HasProfit                     bool                `json:"hasProfit"`
	PnlDelta                      uint64              `json:"pnlDelta"`
	Owner                         solanago.PublicKey  `json:"owner"`
	Pool                          solanago.PublicKey  `json:"pool"`
	SizeUsdDelta                  uint64              `json:"sizeUsdDelta"`
	TransferAmountUsd             uint64              `json:"transferAmountUsd"`
	TransferToken                 uint64              `json:"transferToken"`
	Price                         uint64              `json:"price"`
	PriceSlippage                 uint64              `json:"priceSlippage"`
	FeeUsd                        uint64              `json:"feeUsd"`
	OpenTime                      int64               `json:"openTime"`
	Referral                      *solanago.PublicKey `bin:"optional" json:"referral,omitempty"`
	PositionFeeUsd                uint64              `json:"positionFeeUsd"`
	FundingFeeUsd                 uint64              `json:"fundingFeeUsd"`
	OriginalPositionCollateralUsd uint64              `json:"originalPositionCollateralUsd"`
	PositionCollateralUsd         uint64              `json:"positionCollateralUsd"`
	PriceImpactFeeUsd             uint64              `json:"priceImpactFeeUsd"`
	PositionOpenTime              int64               `json:"positionOpenTime"`
	PositionPrice                 uint64              `json:"positionPrice"`
}

func (obj InstantDecreasePositionEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PositionKey`:
	err = encoder.Encode(obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Serialize `PositionSide`:
	err = encoder.Encode(obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Serialize `PositionCustody`:
	err = encoder.Encode(obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Serialize `PositionCollateralCustody`:
	err = encoder.Encode(obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Serialize `PositionSizeUsd`:
	err = encoder.Encode(obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Serialize `PositionMint`:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Serialize `DesiredMint`:
	err = encoder.Encode(obj.DesiredMint)
	if err != nil {
		return errors.NewField("DesiredMint", err)
	}
	// Serialize `HasProfit`:
	err = encoder.Encode(obj.HasProfit)
	if err != nil {
		return errors.NewField("HasProfit", err)
	}
	// Serialize `PnlDelta`:
	err = encoder.Encode(obj.PnlDelta)
	if err != nil {
		return errors.NewField("PnlDelta", err)
	}
	// Serialize `Owner`:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `SizeUsdDelta`:
	err = encoder.Encode(obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Serialize `TransferAmountUsd`:
	err = encoder.Encode(obj.TransferAmountUsd)
	if err != nil {
		return errors.NewField("TransferAmountUsd", err)
	}
	// Serialize `TransferToken`:
	err = encoder.Encode(obj.TransferToken)
	if err != nil {
		return errors.NewField("TransferToken", err)
	}
	// Serialize `Price`:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Serialize `PriceSlippage`:
	err = encoder.Encode(obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Serialize `FeeUsd`:
	err = encoder.Encode(obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Serialize `OpenTime`:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Serialize `Referral` (optional):
	{
		if obj.Referral == nil {
			err = encoder.WriteOption(false)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
		} else {
			err = encoder.WriteOption(true)
			if err != nil {
				return errors.NewOption("Referral", fmt.Errorf("error while encoding optionality: %w", err))
			}
			err = encoder.Encode(obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Serialize `PositionFeeUsd`:
	err = encoder.Encode(obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Serialize `FundingFeeUsd`:
	err = encoder.Encode(obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Serialize `OriginalPositionCollateralUsd`:
	err = encoder.Encode(obj.OriginalPositionCollateralUsd)
	if err != nil {
		return errors.NewField("OriginalPositionCollateralUsd", err)
	}
	// Serialize `PositionCollateralUsd`:
	err = encoder.Encode(obj.PositionCollateralUsd)
	if err != nil {
		return errors.NewField("PositionCollateralUsd", err)
	}
	// Serialize `PriceImpactFeeUsd`:
	err = encoder.Encode(obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	// Serialize `PositionOpenTime`:
	err = encoder.Encode(obj.PositionOpenTime)
	if err != nil {
		return errors.NewField("PositionOpenTime", err)
	}
	// Serialize `PositionPrice`:
	err = encoder.Encode(obj.PositionPrice)
	if err != nil {
		return errors.NewField("PositionPrice", err)
	}
	return nil
}

func (obj InstantDecreasePositionEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding InstantDecreasePositionEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *InstantDecreasePositionEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PositionKey`:
	err = decoder.Decode(&obj.PositionKey)
	if err != nil {
		return errors.NewField("PositionKey", err)
	}
	// Deserialize `PositionSide`:
	err = decoder.Decode(&obj.PositionSide)
	if err != nil {
		return errors.NewField("PositionSide", err)
	}
	// Deserialize `PositionCustody`:
	err = decoder.Decode(&obj.PositionCustody)
	if err != nil {
		return errors.NewField("PositionCustody", err)
	}
	// Deserialize `PositionCollateralCustody`:
	err = decoder.Decode(&obj.PositionCollateralCustody)
	if err != nil {
		return errors.NewField("PositionCollateralCustody", err)
	}
	// Deserialize `PositionSizeUsd`:
	err = decoder.Decode(&obj.PositionSizeUsd)
	if err != nil {
		return errors.NewField("PositionSizeUsd", err)
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return errors.NewField("PositionMint", err)
	}
	// Deserialize `DesiredMint`:
	err = decoder.Decode(&obj.DesiredMint)
	if err != nil {
		return errors.NewField("DesiredMint", err)
	}
	// Deserialize `HasProfit`:
	err = decoder.Decode(&obj.HasProfit)
	if err != nil {
		return errors.NewField("HasProfit", err)
	}
	// Deserialize `PnlDelta`:
	err = decoder.Decode(&obj.PnlDelta)
	if err != nil {
		return errors.NewField("PnlDelta", err)
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return errors.NewField("Owner", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `SizeUsdDelta`:
	err = decoder.Decode(&obj.SizeUsdDelta)
	if err != nil {
		return errors.NewField("SizeUsdDelta", err)
	}
	// Deserialize `TransferAmountUsd`:
	err = decoder.Decode(&obj.TransferAmountUsd)
	if err != nil {
		return errors.NewField("TransferAmountUsd", err)
	}
	// Deserialize `TransferToken`:
	err = decoder.Decode(&obj.TransferToken)
	if err != nil {
		return errors.NewField("TransferToken", err)
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return errors.NewField("Price", err)
	}
	// Deserialize `PriceSlippage`:
	err = decoder.Decode(&obj.PriceSlippage)
	if err != nil {
		return errors.NewField("PriceSlippage", err)
	}
	// Deserialize `FeeUsd`:
	err = decoder.Decode(&obj.FeeUsd)
	if err != nil {
		return errors.NewField("FeeUsd", err)
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return errors.NewField("OpenTime", err)
	}
	// Deserialize `Referral` (optional):
	{
		ok, err := decoder.ReadOption()
		if err != nil {
			return errors.NewOption("Referral", fmt.Errorf("error while reading optionality: %w", err))
		}
		if ok {
			err = decoder.Decode(&obj.Referral)
			if err != nil {
				return errors.NewField("Referral", err)
			}
		}
	}
	// Deserialize `PositionFeeUsd`:
	err = decoder.Decode(&obj.PositionFeeUsd)
	if err != nil {
		return errors.NewField("PositionFeeUsd", err)
	}
	// Deserialize `FundingFeeUsd`:
	err = decoder.Decode(&obj.FundingFeeUsd)
	if err != nil {
		return errors.NewField("FundingFeeUsd", err)
	}
	// Deserialize `OriginalPositionCollateralUsd`:
	err = decoder.Decode(&obj.OriginalPositionCollateralUsd)
	if err != nil {
		return errors.NewField("OriginalPositionCollateralUsd", err)
	}
	// Deserialize `PositionCollateralUsd`:
	err = decoder.Decode(&obj.PositionCollateralUsd)
	if err != nil {
		return errors.NewField("PositionCollateralUsd", err)
	}
	// Deserialize `PriceImpactFeeUsd`:
	err = decoder.Decode(&obj.PriceImpactFeeUsd)
	if err != nil {
		return errors.NewField("PriceImpactFeeUsd", err)
	}
	// Deserialize `PositionOpenTime`:
	err = decoder.Decode(&obj.PositionOpenTime)
	if err != nil {
		return errors.NewField("PositionOpenTime", err)
	}
	// Deserialize `PositionPrice`:
	err = decoder.Decode(&obj.PositionPrice)
	if err != nil {
		return errors.NewField("PositionPrice", err)
	}
	return nil
}

func (obj *InstantDecreasePositionEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling InstantDecreasePositionEvent: %w", err)
	}
	return nil
}

func UnmarshalInstantDecreasePositionEvent(buf []byte) (*InstantDecreasePositionEvent, error) {
	obj := new(InstantDecreasePositionEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
