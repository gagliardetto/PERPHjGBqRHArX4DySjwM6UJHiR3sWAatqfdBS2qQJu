// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package perpetuals

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_Custody:
		value := new(Custody)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Custody: %w", err)
		}
		return value, nil
	case Account_Perpetuals:
		value := new(Perpetuals)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Perpetuals: %w", err)
		}
		return value, nil
	case Account_Pool:
		value := new(Pool)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Pool: %w", err)
		}
		return value, nil
	case Account_PositionRequest:
		value := new(PositionRequest)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PositionRequest: %w", err)
		}
		return value, nil
	case Account_Position:
		value := new(Position)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Position: %w", err)
		}
		return value, nil
	case Account_TokenLedger:
		value := new(TokenLedger)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as TokenLedger: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_Custody(accountData []byte) (*Custody, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Custody {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Custody, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Custody)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Custody: %w", err)
	}
	return acc, nil
}

func ParseAccount_Perpetuals(accountData []byte) (*Perpetuals, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Perpetuals {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Perpetuals, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Perpetuals)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Perpetuals: %w", err)
	}
	return acc, nil
}

func ParseAccount_Pool(accountData []byte) (*Pool, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Pool {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Pool, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Pool)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Pool: %w", err)
	}
	return acc, nil
}

func ParseAccount_PositionRequest(accountData []byte) (*PositionRequest, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PositionRequest {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PositionRequest, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PositionRequest)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PositionRequest: %w", err)
	}
	return acc, nil
}

func ParseAccount_Position(accountData []byte) (*Position, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Position {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Position, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Position)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Position: %w", err)
	}
	return acc, nil
}

func ParseAccount_TokenLedger(accountData []byte) (*TokenLedger, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_TokenLedger {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_TokenLedger, binary.FormatDiscriminator(discriminator))
	}
	acc := new(TokenLedger)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type TokenLedger: %w", err)
	}
	return acc, nil
}
