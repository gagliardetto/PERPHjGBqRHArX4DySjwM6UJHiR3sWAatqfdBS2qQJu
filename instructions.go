// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains instructions.

package perpetuals

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "init" instruction.
func NewInitInstruction(
	// Params:
	paramsParam InitParams,

	// Accounts:
	upgradeAuthorityAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	perpetualsProgramAccount solanago.PublicKey,
	perpetualsProgramDataAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Init[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "upgrade_authority": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(upgradeAuthorityAccount, true, true))
		// Account 1 "admin": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, false))
		// Account 2 "transfer_authority": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, true, false))
		// Account 3 "perpetuals": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, true, false))
		// Account 4 "perpetuals_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsProgramAccount, false, false))
		// Account 5 "perpetuals_program_data": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsProgramDataAccount, false, false))
		// Account 6 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 7 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "add_pool" instruction.
func NewAddPoolInstruction(
	// Params:
	paramsParam AddPoolParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	lpTokenMintAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_AddPool[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 1 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 2 "perpetuals": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, true, false))
		// Account 3 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 4 "lp_token_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenMintAccount, true, false))
		// Account 5 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 6 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 7 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "add_custody" instruction.
func NewAddCustodyInstruction(
	// Params:
	paramsParam AddCustodyParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyTokenAccountAccount solanago.PublicKey,
	custodyTokenMintAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_AddCustody[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 1 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 2 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 3 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 4 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 5 "custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyTokenAccountAccount, true, false))
		// Account 6 "custody_token_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyTokenMintAccount, false, false))
		// Account 7 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 8 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 9 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "set_custody_config" instruction.
func NewSetCustodyConfigInstruction(
	// Params:
	paramsParam SetCustodyConfigParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetCustodyConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "set_pool_config" instruction.
func NewSetPoolConfigInstruction(
	// Params:
	paramsParam SetPoolConfigParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetPoolConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "set_perpetuals_config" instruction.
func NewSetPerpetualsConfigInstruction(
	// Params:
	paramsParam SetPerpetualsConfigParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetPerpetualsConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
		// Account 1 "perpetuals": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "transfer_admin" instruction.
func NewTransferAdminInstruction(
	// Params:
	paramsParam TransferAdminParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	newAdminAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_TransferAdmin[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
		// Account 1 "new_admin": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(newAdminAccount, false, false))
		// Account 2 "perpetuals": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "withdraw_fees2" instruction.
func NewWithdrawFees2Instruction(
	// Params:
	paramsParam WithdrawFees2Params,

	// Accounts:
	keeperAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyTokenAccountAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	receivingTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_WithdrawFees2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 2 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 3 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 4 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 5 "custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyTokenAccountAccount, true, false))
		// Account 6 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 7 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 8 "receiving_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingTokenAccountAccount, true, false))
		// Account 9 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_token_metadata" instruction.
func NewCreateTokenMetadataInstruction(
	// Params:
	paramsParam CreateTokenMetadataParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	metadataAccount solanago.PublicKey,
	lpTokenMintAccount solanago.PublicKey,
	tokenMetadataProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateTokenMetadata[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, true, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 3 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 4 "metadata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(metadataAccount, true, false))
		// Account 5 "lp_token_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenMintAccount, false, false))
		// Account 6 "token_metadata_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenMetadataProgramAccount, false, false))
		// Account 7 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 8 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_token_ledger" instruction.
func NewCreateTokenLedgerInstruction(
	tokenLedgerAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "token_ledger": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenLedgerAccount, true, true))
		// Account 1 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 2 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "realloc_custody" instruction.
func NewReallocCustodyInstruction(
	keeperAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, true, true))
		// Account 1 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 2 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 3 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "realloc_pool" instruction.
func NewReallocPoolInstruction(
	keeperAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, true, true))
		// Account 1 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 2 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 3 "rent": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(rentAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "operator_set_custody_config" instruction.
func NewOperatorSetCustodyConfigInstruction(
	// Params:
	paramsParam OperatorSetCustodyConfigParams,

	// Accounts:
	operatorAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_OperatorSetCustodyConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "operator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(operatorAccount, false, true))
		// Account 1 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "operator_set_pool_config" instruction.
func NewOperatorSetPoolConfigInstruction(
	// Params:
	paramsParam OperatorSetPoolConfigParams,

	// Accounts:
	operatorAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_OperatorSetPoolConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "operator": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(operatorAccount, false, true))
		// Account 1 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "test_init" instruction.
func NewTestInitInstruction(
	// Params:
	paramsParam TestInitParams,

	// Accounts:
	upgradeAuthorityAccount solanago.PublicKey,
	adminAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_TestInit[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "upgrade_authority": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(upgradeAuthorityAccount, true, true))
		// Account 1 "admin": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, false))
		// Account 2 "transfer_authority": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, true, false))
		// Account 3 "perpetuals": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, true, false))
		// Account 4 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 5 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "set_test_time" instruction.
func NewSetTestTimeInstruction(
	// Params:
	paramsParam SetTestTimeParams,

	// Accounts:
	adminAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SetTestTime[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "admin": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(adminAccount, false, true))
		// Account 1 "perpetuals": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "set_token_ledger" instruction.
func NewSetTokenLedgerInstruction(
	tokenLedgerAccount solanago.PublicKey,
	tokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "token_ledger": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenLedgerAccount, true, false))
		// Account 1 "token_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenAccountAccount, false, false))
		// Account 2 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "swap2" instruction.
func NewSwap2Instruction(
	// Params:
	paramsParam Swap2Params,

	// Accounts:
	ownerAccount solanago.PublicKey,
	fundingAccountAccount solanago.PublicKey,
	receivingAccountAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	receivingCustodyAccount solanago.PublicKey,
	receivingCustodyDovesPriceAccountAccount solanago.PublicKey,
	receivingCustodyPythnetPriceAccountAccount solanago.PublicKey,
	receivingCustodyTokenAccountAccount solanago.PublicKey,
	dispensingCustodyAccount solanago.PublicKey,
	dispensingCustodyDovesPriceAccountAccount solanago.PublicKey,
	dispensingCustodyPythnetPriceAccountAccount solanago.PublicKey,
	dispensingCustodyTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Swap2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "funding_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(fundingAccountAccount, true, false))
		// Account 2 "receiving_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingAccountAccount, true, false))
		// Account 3 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 4 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "receiving_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyAccount, true, false))
		// Account 7 "receiving_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyDovesPriceAccountAccount, false, false))
		// Account 8 "receiving_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyPythnetPriceAccountAccount, false, false))
		// Account 9 "receiving_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyTokenAccountAccount, true, false))
		// Account 10 "dispensing_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyAccount, true, false))
		// Account 11 "dispensing_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyDovesPriceAccountAccount, false, false))
		// Account 12 "dispensing_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyPythnetPriceAccountAccount, false, false))
		// Account 13 "dispensing_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyTokenAccountAccount, true, false))
		// Account 14 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 15 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 16 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "add_liquidity2" instruction.
func NewAddLiquidity2Instruction(
	// Params:
	paramsParam AddLiquidity2Params,

	// Accounts:
	ownerAccount solanago.PublicKey,
	fundingAccountAccount solanago.PublicKey,
	lpTokenAccountAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	custodyTokenAccountAccount solanago.PublicKey,
	lpTokenMintAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_AddLiquidity2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "funding_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(fundingAccountAccount, true, false))
		// Account 2 "lp_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenAccountAccount, true, false))
		// Account 3 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 4 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 7 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 8 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 9 "custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyTokenAccountAccount, true, false))
		// Account 10 "lp_token_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenMintAccount, true, false))
		// Account 11 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 12 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 13 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "remove_liquidity2" instruction.
func NewRemoveLiquidity2Instruction(
	// Params:
	paramsParam RemoveLiquidity2Params,

	// Accounts:
	ownerAccount solanago.PublicKey,
	receivingAccountAccount solanago.PublicKey,
	lpTokenAccountAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	custodyTokenAccountAccount solanago.PublicKey,
	lpTokenMintAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RemoveLiquidity2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "receiving_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingAccountAccount, true, false))
		// Account 2 "lp_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenAccountAccount, true, false))
		// Account 3 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 4 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 7 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 8 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 9 "custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyTokenAccountAccount, true, false))
		// Account 10 "lp_token_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenMintAccount, true, false))
		// Account 11 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 12 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 13 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_increase_position_market_request" instruction.
func NewCreateIncreasePositionMarketRequestInstruction(
	// Params:
	paramsParam CreateIncreasePositionMarketRequestParams,

	// Accounts:
	ownerAccount solanago.PublicKey,
	fundingAccountAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	inputMintAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateIncreasePositionMarketRequest[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 1 "funding_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(fundingAccountAccount, true, false))
		// Account 2 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 3 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 4 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 5 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 6 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 7 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 8 "collateral_custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, false, false))
		// Account 9 "input_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(inputMintAccount, false, false))
		// Account 10 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 11 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 12 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 13 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 14 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 15 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_decrease_position_request2" instruction.
func NewCreateDecreasePositionRequest2Instruction(
	// Params:
	paramsParam CreateDecreasePositionRequest2Params,

	// Accounts:
	ownerAccount solanago.PublicKey,
	receivingAccountAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	desiredMintAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateDecreasePositionRequest2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 1 "receiving_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingAccountAccount, true, false))
		// Account 2 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 3 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 4 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 5 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 6 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 7 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 8 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 9 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 10 "collateral_custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, false, false))
		// Account 11 "desired_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(desiredMintAccount, false, false))
		// Account 12 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 13 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 14 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 15 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 16 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 17 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_decrease_position_market_request" instruction.
func NewCreateDecreasePositionMarketRequestInstruction(
	// Params:
	paramsParam CreateDecreasePositionMarketRequestParams,

	// Accounts:
	ownerAccount solanago.PublicKey,
	receivingAccountAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	desiredMintAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateDecreasePositionMarketRequest[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 1 "receiving_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingAccountAccount, true, false))
		// Account 2 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 3 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 4 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 5 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 6 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 7 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 8 "collateral_custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, false, false))
		// Account 9 "desired_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(desiredMintAccount, false, false))
		// Account 10 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 11 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 12 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 13 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 14 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 15 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_decrease_position_request2" instruction.
func NewUpdateDecreasePositionRequest2Instruction(
	// Params:
	paramsParam UpdateDecreasePositionRequest2Params,

	// Accounts:
	ownerAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateDecreasePositionRequest2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 3 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 4 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 5 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 6 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 7 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "close_position_request" instruction.
func NewClosePositionRequestInstruction(
	// Params:
	paramsParam ClosePositionRequestParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	ownerAtaAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_ClosePositionRequest[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Optional
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "owner": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, false))
		// Account 2 "owner_ata": Writable, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(ownerAtaAccount, true, false))
		// Account 3 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 4 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 5 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 6 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 7 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 8 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 9 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "close_position_request2" instruction.
func NewClosePositionRequest2Instruction(
	keeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	ownerAtaAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	mintAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Writable, Signer, Optional
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, true, true))
		// Account 1 "owner": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, false))
		// Account 2 "owner_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAtaAccount, true, false))
		// Account 3 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 4 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 5 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 6 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 7 "mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(mintAccount, false, false))
		// Account 8 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 9 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 10 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 11 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 12 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "increase_position4" instruction.
func NewIncreasePosition4Instruction(
	// Params:
	paramsParam IncreasePosition4Params,

	// Accounts:
	keeperAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_IncreasePosition4[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 3 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 4 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 5 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 6 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 7 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 8 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 9 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 10 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 11 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 12 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 13 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 14 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 15 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "increase_position_pre_swap" instruction.
func NewIncreasePositionPreSwapInstruction(
	// Params:
	paramsParam IncreasePositionPreSwapParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	keeperAtaAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	instructionAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_IncreasePositionPreSwap[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "keeper_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAtaAccount, true, false))
		// Account 2 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 3 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 4 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 5 "collateral_custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, false, false))
		// Account 6 "collateral_custody_token_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, false, false))
		// Account 7 "instruction": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(instructionAccount, false, false))
		// Account 8 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 9 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 10 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "increase_position_with_internal_swap" instruction.
func NewIncreasePositionWithInternalSwapInstruction(
	// Params:
	paramsParam IncreasePositionWithInternalSwapParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	receivingCustodyAccount solanago.PublicKey,
	receivingCustodyDovesPriceAccountAccount solanago.PublicKey,
	receivingCustodyPythnetPriceAccountAccount solanago.PublicKey,
	receivingCustodyTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_IncreasePositionWithInternalSwap[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 3 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 4 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 5 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 6 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 7 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 8 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 9 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 10 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 11 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 12 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 13 "receiving_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyAccount, true, false))
		// Account 14 "receiving_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyDovesPriceAccountAccount, false, false))
		// Account 15 "receiving_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyPythnetPriceAccountAccount, false, false))
		// Account 16 "receiving_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingCustodyTokenAccountAccount, true, false))
		// Account 17 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 18 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 19 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "decrease_position4" instruction.
func NewDecreasePosition4Instruction(
	// Params:
	paramsParam DecreasePosition4Params,

	// Accounts:
	keeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_DecreasePosition4[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "owner": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, false))
		// Account 2 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 3 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 4 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 5 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 6 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 7 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 8 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 9 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 10 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 11 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 12 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 13 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 14 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 16 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 17 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "decrease_position_with_internal_swap" instruction.
func NewDecreasePositionWithInternalSwapInstruction(
	// Params:
	paramsParam DecreasePositionWithInternalSwapParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	dispensingCustodyAccount solanago.PublicKey,
	dispensingCustodyDovesPriceAccountAccount solanago.PublicKey,
	dispensingCustodyPythnetPriceAccountAccount solanago.PublicKey,
	dispensingCustodyTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_DecreasePositionWithInternalSwap[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "owner": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, false))
		// Account 2 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 3 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 4 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 5 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 6 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 7 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 8 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 9 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 10 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 11 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 12 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 13 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 14 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 15 "dispensing_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyAccount, true, false))
		// Account 16 "dispensing_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyDovesPriceAccountAccount, false, false))
		// Account 17 "dispensing_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyPythnetPriceAccountAccount, false, false))
		// Account 18 "dispensing_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(dispensingCustodyTokenAccountAccount, true, false))
		// Account 19 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 20 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 21 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "liquidate_full_position4" instruction.
func NewLiquidateFullPosition4Instruction(
	// Params:
	paramsParam LiquidateFullPosition4Params,

	// Accounts:
	signerAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_LiquidateFullPosition4[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "signer": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(signerAccount, false, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 3 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 4 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 5 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 6 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 7 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 8 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 9 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 10 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 11 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 12 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "refresh_assets_under_management" instruction.
func NewRefreshAssetsUnderManagementInstruction(
	// Params:
	paramsParam RefreshAssetsUnderManagementParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_RefreshAssetsUnderManagement[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 2 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "instant_create_tpsl" instruction.
func NewInstantCreateTpslInstruction(
	// Params:
	paramsParam InstantCreateTpslParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	apiKeeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	receivingAccountAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	desiredMintAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InstantCreateTpsl[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "api_keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(apiKeeperAccount, false, true))
		// Account 2 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 3 "receiving_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingAccountAccount, true, false))
		// Account 4 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 7 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 8 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 9 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 10 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 11 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 12 "collateral_custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, false, false))
		// Account 13 "desired_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(desiredMintAccount, false, false))
		// Account 14 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 16 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 17 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 18 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 19 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "instant_create_limit_order" instruction.
func NewInstantCreateLimitOrderInstruction(
	// Params:
	paramsParam InstantCreateLimitOrderParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	apiKeeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	fundingAccountAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	positionRequestAtaAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	inputMintAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InstantCreateLimitOrder[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "api_keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(apiKeeperAccount, false, true))
		// Account 2 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 3 "funding_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(fundingAccountAccount, true, false))
		// Account 4 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 5 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 6 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 7 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 8 "position_request_ata": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAtaAccount, true, false))
		// Account 9 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 10 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 11 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 12 "collateral_custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, false, false))
		// Account 13 "input_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(inputMintAccount, false, false))
		// Account 14 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 15 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 16 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 17 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 18 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 19 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "instant_increase_position" instruction.
func NewInstantIncreasePositionInstruction(
	// Params:
	paramsParam InstantIncreasePositionParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	apiKeeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	fundingAccountAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	tokenLedgerAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InstantIncreasePosition[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "api_keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(apiKeeperAccount, false, true))
		// Account 2 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 3 "funding_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(fundingAccountAccount, true, false))
		// Account 4 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 5 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 6 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 7 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 8 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 9 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 10 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 11 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 12 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 13 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 14 "token_ledger": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(tokenLedgerAccount, false, false))
		// Account 15 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 16 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 17 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 18 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 19 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "instant_decrease_position" instruction.
func NewInstantDecreasePositionInstruction(
	// Params:
	paramsParam InstantDecreasePositionParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	apiKeeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	receivingAccountAccount solanago.PublicKey,
	transferAuthorityAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyAccount solanago.PublicKey,
	collateralCustodyDovesPriceAccountAccount solanago.PublicKey,
	collateralCustodyPythnetPriceAccountAccount solanago.PublicKey,
	collateralCustodyTokenAccountAccount solanago.PublicKey,
	desiredMintAccount solanago.PublicKey,
	referralAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InstantDecreasePosition[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "api_keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(apiKeeperAccount, false, true))
		// Account 2 "owner": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 3 "receiving_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(receivingAccountAccount, true, false))
		// Account 4 "transfer_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(transferAuthorityAccount, false, false))
		// Account 5 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 6 "pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, true, false))
		// Account 7 "position": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, true, false))
		// Account 8 "custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, true, false))
		// Account 9 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 10 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 11 "collateral_custody": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyAccount, true, false))
		// Account 12 "collateral_custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyDovesPriceAccountAccount, false, false))
		// Account 13 "collateral_custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyPythnetPriceAccountAccount, false, false))
		// Account 14 "collateral_custody_token_account": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(collateralCustodyTokenAccountAccount, true, false))
		// Account 15 "desired_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(desiredMintAccount, false, false))
		// Account 16 "referral": Read-only, Non-signer, Optional
		accounts__.Append(solanago.NewAccountMeta(referralAccount, false, false))
		// Account 17 "token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 18 "associated_token_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 19 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 20 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 21 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "instant_update_limit_order" instruction.
func NewInstantUpdateLimitOrderInstruction(
	// Params:
	paramsParam InstantUpdateLimitOrderParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	apiKeeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InstantUpdateLimitOrder[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "api_keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(apiKeeperAccount, false, true))
		// Account 2 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 3 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 4 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 5 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 6 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 7 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 8 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 9 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "instant_update_tpsl" instruction.
func NewInstantUpdateTpslInstruction(
	// Params:
	paramsParam InstantUpdateTpslParams,

	// Accounts:
	keeperAccount solanago.PublicKey,
	apiKeeperAccount solanago.PublicKey,
	ownerAccount solanago.PublicKey,
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	positionAccount solanago.PublicKey,
	positionRequestAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_InstantUpdateTpsl[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(keeperAccount, false, true))
		// Account 1 "api_keeper": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(apiKeeperAccount, false, true))
		// Account 2 "owner": Read-only, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 3 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 4 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 5 "position": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionAccount, false, false))
		// Account 6 "position_request": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(positionRequestAccount, true, false))
		// Account 7 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 8 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 9 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 10 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 11 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "get_add_liquidity_amount_and_fee2" instruction.
func NewGetAddLiquidityAmountAndFee2Instruction(
	// Params:
	paramsParam GetAddLiquidityAmountAndFee2Params,

	// Accounts:
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	lpTokenMintAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_GetAddLiquidityAmountAndFee2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 1 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 2 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 3 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 4 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 5 "lp_token_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenMintAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "get_remove_liquidity_amount_and_fee2" instruction.
func NewGetRemoveLiquidityAmountAndFee2Instruction(
	// Params:
	paramsParam GetRemoveLiquidityAmountAndFee2Params,

	// Accounts:
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
	custodyAccount solanago.PublicKey,
	custodyDovesPriceAccountAccount solanago.PublicKey,
	custodyPythnetPriceAccountAccount solanago.PublicKey,
	lpTokenMintAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_GetRemoveLiquidityAmountAndFee2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 1 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
		// Account 2 "custody": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyAccount, false, false))
		// Account 3 "custody_doves_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyDovesPriceAccountAccount, false, false))
		// Account 4 "custody_pythnet_price_account": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(custodyPythnetPriceAccountAccount, false, false))
		// Account 5 "lp_token_mint": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lpTokenMintAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "get_assets_under_management2" instruction.
func NewGetAssetsUnderManagement2Instruction(
	// Params:
	paramsParam GetAssetsUnderManagement2Params,

	// Accounts:
	perpetualsAccount solanago.PublicKey,
	poolAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_GetAssetsUnderManagement2[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramsParam`:
		err = enc__.Encode(paramsParam)
		if err != nil {
			return nil, errors.NewField("paramsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "perpetuals": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(perpetualsAccount, false, false))
		// Account 1 "pool": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}
